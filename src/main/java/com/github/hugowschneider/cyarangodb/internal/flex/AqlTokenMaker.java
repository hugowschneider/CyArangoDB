/* The following code was generated by JFlex 1.5.1 */

package com.github.hugowschneider.cyarangodb.internal.flex;

import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;

@SuppressWarnings("unused")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>./src/main/jflex/AqlTokenMaker.flex</tt>
 */
public class AqlTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int DOUBLE_QUOTED_STRING = 6;
  public static final int SINGLE_QUOTED_STRING = 8;
  public static final int VARIABLE_DECLARATION = 10;
  public static final int LET = 12;
  public static final int FOR = 14;
  public static final int COLLECT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
      8, 8
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\42\1\60\1\53\1\55\1\55\1\54\22\42\1\60\1\42\1\50" +
      "\4\42\1\51\2\57\1\56\1\47\1\63\1\43\1\46\1\52\1\32" +
      "\1\31\1\27\2\45\1\40\1\36\1\45\1\35\1\45\1\42\1\57" +
      "\1\42\1\62\3\42\1\15\1\23\1\21\1\22\1\2\1\6\1\14" +
      "\1\17\1\7\1\37\1\26\1\10\1\11\1\5\1\13\1\16\1\33" +
      "\1\1\1\12\1\3\1\4\1\20\1\25\1\30\1\24\1\41\1\57" +
      "\1\64\1\57\1\42\1\34\1\61\1\15\1\23\1\21\1\22\1\2" +
      "\1\6\1\14\1\17\1\7\1\37\1\26\1\10\1\11\1\5\1\13" +
      "\1\16\1\33\1\1\1\12\1\3\1\4\1\20\1\25\1\30\1\24" +
      "\1\41\1\57\1\42\1\57\7\42\1\55\44\42\1\0\12\42\1\0" +
      "\4\42\1\0\5\42\27\0\1\42\37\0\1\42\70\0\2\7\115\0" +
      "\1\12\u0142\0\4\42\14\0\16\42\5\0\7\42\1\0\1\42\1\0" +
      "\21\42\165\0\1\42\2\0\2\42\4\0\10\42\1\0\1\42\3\0" +
      "\1\42\1\0\1\42\24\0\1\42\123\0\1\42\213\0\1\42\245\0" +
      "\11\42\46\0\2\42\1\0\7\42\47\0\11\42\55\0\1\42\1\0" +
      "\1\42\2\0\1\42\2\0\1\42\1\0\10\42\33\0\5\42\3\0" +
      "\35\42\13\0\5\42\100\0\12\44\4\42\146\0\1\42\10\0\2\42" +
      "\12\0\1\42\6\0\12\44\3\0\2\42\1\0\20\42\73\0\2\42" +
      "\145\0\16\42\12\44\54\0\4\42\1\0\5\42\56\0\22\42\34\0" +
      "\104\42\1\0\1\42\13\0\67\42\33\0\1\42\144\0\2\42\12\44" +
      "\1\42\7\0\1\42\7\0\1\42\3\0\1\42\10\0\2\42\2\0" +
      "\2\42\26\0\1\42\7\0\1\42\1\0\3\42\4\0\2\42\11\0" +
      "\2\42\2\0\2\42\4\0\10\42\1\0\4\42\2\0\1\42\5\0" +
      "\2\42\12\44\2\0\17\42\3\0\1\42\6\0\4\42\2\0\2\42" +
      "\26\0\1\42\7\0\1\42\2\0\1\42\2\0\1\42\2\0\2\42" +
      "\1\0\1\42\5\0\4\42\2\0\2\42\3\0\3\42\1\0\7\42" +
      "\4\0\1\42\1\0\7\42\12\44\6\0\13\42\3\0\1\42\11\0" +
      "\1\42\3\0\1\42\26\0\1\42\7\0\1\42\2\0\1\42\5\0" +
      "\2\42\12\0\1\42\3\0\1\42\3\0\2\42\1\0\17\42\4\0" +
      "\2\42\12\44\21\42\3\0\1\42\10\0\2\42\2\0\2\42\26\0" +
      "\1\42\7\0\1\42\2\0\1\42\5\0\2\42\11\0\2\42\2\0" +
      "\2\42\3\0\10\42\2\0\4\42\2\0\1\42\5\0\2\42\12\44" +
      "\1\42\1\0\20\42\2\0\1\42\6\0\3\42\3\0\1\42\4\0" +
      "\3\42\2\0\1\42\1\0\1\42\2\0\3\42\2\0\3\42\3\0" +
      "\3\42\14\0\4\42\5\0\3\42\3\0\1\42\4\0\2\42\1\0" +
      "\6\42\1\0\16\42\12\44\21\42\3\0\1\42\10\0\1\42\3\0" +
      "\1\42\27\0\1\42\12\0\1\42\5\0\3\42\10\0\1\42\3\0" +
      "\1\42\4\0\7\42\2\0\1\42\2\0\6\42\4\0\2\42\12\44" +
      "\22\42\2\0\1\42\10\0\1\42\3\0\1\42\27\0\1\42\12\0" +
      "\1\42\5\0\2\42\11\0\1\42\3\0\1\42\4\0\7\42\2\0" +
      "\7\42\1\0\1\42\4\0\2\42\12\44\1\42\2\0\17\42\2\0" +
      "\1\42\10\0\1\42\3\0\1\42\51\0\2\42\10\0\1\42\3\0" +
      "\1\42\5\0\10\42\1\0\10\42\4\0\2\42\12\44\12\42\6\0" +
      "\2\42\2\0\1\42\22\0\3\42\30\0\1\42\11\0\1\42\1\0" +
      "\2\42\7\0\3\42\1\0\4\42\6\0\1\42\1\0\1\42\10\0" +
      "\22\42\2\0\15\42\72\0\5\42\17\0\1\42\12\44\47\42\2\0" +
      "\1\42\1\0\2\42\2\0\1\42\1\0\2\42\1\0\6\42\4\0" +
      "\1\42\7\0\1\42\3\0\1\42\1\0\1\42\1\0\2\42\2\0" +
      "\1\42\15\0\1\42\3\0\2\42\5\0\1\42\1\0\1\42\6\0" +
      "\2\42\12\44\2\42\4\0\40\42\1\0\27\42\2\0\6\42\12\44" +
      "\13\42\1\0\1\42\1\0\1\42\1\0\4\42\12\0\1\42\44\0" +
      "\4\42\24\0\1\42\22\0\1\42\44\0\11\42\1\0\71\42\100\0" +
      "\12\44\6\42\100\0\12\44\4\0\2\42\46\0\1\42\1\0\5\42" +
      "\1\0\2\42\53\0\1\42\u014d\0\1\42\4\0\2\42\7\0\1\42" +
      "\1\0\1\42\4\0\2\42\51\0\1\42\4\0\2\42\41\0\1\42" +
      "\4\0\2\42\7\0\1\42\1\0\1\42\4\0\2\42\17\0\1\42" +
      "\71\0\1\42\4\0\2\42\103\0\2\42\3\0\40\42\20\0\20\42" +
      "\125\0\14\42\u026c\0\2\42\21\0\1\42\32\0\5\42\113\0\3\42" +
      "\3\0\17\42\15\0\1\42\7\0\13\42\25\0\13\42\24\0\14\42" +
      "\15\0\1\42\3\0\1\42\2\0\14\42\124\0\3\42\1\0\4\42" +
      "\2\0\2\42\12\44\41\42\3\0\2\42\12\44\6\42\130\0\10\42" +
      "\53\0\5\42\106\0\12\42\35\0\3\42\14\0\4\42\14\0\12\42" +
      "\12\44\36\0\2\42\5\0\13\42\54\0\4\42\32\0\6\42\12\44" +
      "\46\42\34\0\4\42\77\0\1\42\35\0\2\42\1\0\12\44\6\42" +
      "\12\44\15\42\1\0\130\42\114\0\4\42\12\44\21\42\11\0\14\42" +
      "\60\0\12\44\72\0\14\42\70\0\10\42\12\44\3\42\3\0\12\44" +
      "\44\0\122\42\3\0\1\42\43\0\11\42\347\0\25\42\u011a\0\2\42" +
      "\6\0\2\42\46\0\2\42\6\0\2\42\10\0\1\42\1\0\1\42" +
      "\1\0\1\42\1\0\1\42\37\0\2\42\65\0\1\42\7\0\1\42" +
      "\1\0\3\42\3\0\1\42\7\0\3\42\4\0\2\42\6\0\4\42" +
      "\15\0\5\42\3\0\1\42\7\0\53\42\1\55\1\55\25\42\2\0" +
      "\23\42\1\0\34\42\1\0\15\42\1\0\20\42\15\0\63\42\41\0" +
      "\21\42\1\0\4\42\1\0\2\42\12\0\1\42\1\0\3\42\5\0" +
      "\6\42\1\0\1\42\1\0\1\42\1\0\1\42\1\26\3\0\1\42" +
      "\13\0\2\42\4\0\5\42\5\0\4\42\1\0\21\42\51\0\u032d\42" +
      "\64\0\u0716\42\57\0\1\42\57\0\1\42\205\0\6\42\11\0\14\42" +
      "\46\0\1\42\1\0\5\42\1\0\2\42\70\0\7\42\1\0\17\42" +
      "\30\0\11\42\7\0\1\42\7\0\1\42\7\0\1\42\7\0\1\42" +
      "\7\0\1\42\7\0\1\42\7\0\1\42\7\0\1\42\40\0\57\42" +
      "\1\0\u01d5\42\3\0\31\42\17\0\1\42\5\0\2\42\5\0\4\42" +
      "\126\0\2\42\2\0\2\42\3\0\1\42\132\0\1\42\4\0\5\42" +
      "\51\0\3\42\136\0\21\42\33\0\65\42\20\0\u0200\42\u19b6\0\112\42" +
      "\u51cd\0\63\42\u048d\0\103\42\56\0\2\42\u010d\0\3\42\20\0\12\44" +
      "\2\0\24\42\63\0\1\42\12\0\1\42\31\0\7\42\123\0\45\42" +
      "\11\0\2\42\147\0\2\42\4\0\1\42\4\0\14\42\13\0\115\42" +
      "\60\0\30\42\64\0\14\42\105\0\13\42\12\44\6\42\30\0\3\42" +
      "\1\0\4\42\12\44\44\0\2\42\44\0\14\42\35\0\3\42\101\0" +
      "\16\42\1\0\12\44\46\42\67\0\11\42\16\0\2\42\12\44\6\42" +
      "\27\0\3\42\2\0\4\42\103\0\30\42\3\0\2\42\20\0\2\42" +
      "\5\0\12\42\6\0\2\42\6\0\2\42\6\0\11\42\7\0\1\42" +
      "\7\0\221\42\53\0\1\42\2\0\2\42\12\44\6\42\u2ba4\0\14\42" +
      "\27\0\4\42\61\0\u2104\42\u016e\0\2\42\152\0\46\42\7\0\14\42" +
      "\5\0\5\42\14\0\1\42\15\0\1\42\5\0\1\42\1\0\1\42" +
      "\2\0\1\42\2\0\1\42\154\0\41\42\u016b\0\22\42\100\0\2\42" +
      "\66\0\50\42\14\0\4\42\20\0\20\42\7\0\14\42\2\0\30\42" +
      "\3\0\40\42\5\0\1\42\207\0\23\42\12\44\7\42\32\0\4\42" +
      "\1\0\1\42\32\0\13\42\131\0\3\42\6\0\2\42\6\0\2\42" +
      "\6\0\2\42\3\0\43\42";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\11\0\23\1\1\2\2\1\1\3\1\4\1\5\1\6" +
      "\1\3\1\7\2\10\1\11\1\12\1\13\1\0\1\11" +
      "\1\14\1\15\1\16\2\17\6\16\1\20\1\7\1\0" +
      "\20\1\1\21\16\1\1\21\15\1\1\22\12\1\1\0" +
      "\1\2\2\1\1\23\1\24\1\25\1\11\2\0\1\26" +
      "\5\16\12\1\1\22\15\1\1\27\2\1\1\30\4\1" +
      "\1\22\1\1\1\22\33\1\1\2\1\0\1\2\1\0" +
      "\1\1\6\16\5\1\1\22\37\1\1\0\1\31\1\0" +
      "\1\1\1\21\2\16\11\1\2\22\14\1\1\21\6\1" +
      "\1\31\1\1\1\16\1\21\15\1\1\22\21\1\1\16" +
      "\16\1\1\32\20\1\1\16\21\1\1\22\2\1\1\16" +
      "\55\1\1\22\21\1";

  private static int[] zzUnpackAction() {
    int[] result = new int[429];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173" +
      "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b" +
      "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3" +
      "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\65" +
      "\0\65\0\65\0\65\0\u066b\0\u06a0\0\65\0\u06d5\0\u070a" +
      "\0\65\0\65\0\u073f\0\u0774\0\u07a9\0\65\0\u07de\0\65" +
      "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986" +
      "\0\u09bb\0\u01dd\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9" +
      "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1" +
      "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49" +
      "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1" +
      "\0\u1026\0\u01dd\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164" +
      "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u01dd" +
      "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f" +
      "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\65" +
      "\0\65\0\65\0\u07a9\0\u1627\0\u07de\0\u165c\0\u1691\0\u16c6" +
      "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e" +
      "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16" +
      "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe" +
      "\0\u1bf3\0\u1c28\0\u01dd\0\u1c5d\0\u1c92\0\u01dd\0\u1cc7\0\u1cfc" +
      "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4" +
      "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c" +
      "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4" +
      "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c" +
      "\0\u23d1\0\u23d1\0\u2406\0\u243b\0\u2470\0\65\0\u24a5\0\u24da" +
      "\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682" +
      "\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a" +
      "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2" +
      "\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a" +
      "\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22" +
      "\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u07de\0\u2e2b\0\u2e60\0\u2e95" +
      "\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d" +
      "\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5" +
      "\0\u321a\0\u1977\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3072\0\u3323" +
      "\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb" +
      "\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673" +
      "\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b" +
      "\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3" +
      "\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b" +
      "\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13" +
      "\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u01dd" +
      "\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e" +
      "\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6" +
      "\0\u420b\0\u4240\0\u4275\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e" +
      "\0\u43b3\0\u43e8\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526" +
      "\0\u455b\0\u4590\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce" +
      "\0\u4703\0\u4738\0\u476d\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876" +
      "\0\u48ab\0\u48e0\0\u4915\0\u494a\0\u497f\0\u49b4\0\u49e9\0\u4a1e" +
      "\0\u4a53\0\u4a88\0\u4abd\0\u4af2\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6" +
      "\0\u4bfb\0\u4c30\0\u4c65\0\u4c9a\0\u4ccf\0\u4d04\0\u4d39\0\u4d6e" +
      "\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42\0\u4e77\0\u4eac\0\u4ee1\0\u4f16" +
      "\0\u4f4b\0\u4f80\0\u4fb5\0\u126d\0\u4fea\0\u501f\0\u5054\0\u5089" +
      "\0\u50be\0\u50f3\0\u5128\0\u515d\0\u5192\0\u51c7\0\u51fc\0\u5231" +
      "\0\u5266\0\u529b\0\u52d0\0\u5305\0\u533a";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[429];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
      "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\12" +
      "\1\31\1\32\2\12\1\33\1\34\1\35\1\12\2\35" +
      "\2\12\2\35\1\36\1\35\1\37\3\40\1\35\1\41" +
      "\1\40\1\42\1\43\1\44\2\45\1\0\1\40\1\41" +
      "\1\45\1\40\2\41\1\40\65\0\54\46\2\0\1\47" +
      "\6\46\50\50\1\51\2\50\1\52\10\50\1\53\51\54" +
      "\1\51\1\54\1\52\10\54\1\53\27\55\1\0\1\55" +
      "\2\0\2\55\2\0\1\55\1\0\1\55\11\0\2\45" +
      "\3\0\1\45\1\0\1\56\2\0\27\57\1\60\1\57" +
      "\2\60\2\57\2\60\1\57\1\60\1\57\11\60\2\45" +
      "\1\0\2\60\1\45\1\61\1\56\2\60\7\57\1\62" +
      "\17\57\1\60\1\57\2\60\2\57\2\60\1\57\1\60" +
      "\1\57\11\60\2\45\1\0\2\60\1\45\1\61\1\60" +
      "\1\41\1\60\7\57\1\63\5\57\1\64\3\57\1\65" +
      "\3\57\1\66\1\67\1\60\1\57\2\60\2\57\2\60" +
      "\1\57\1\60\1\57\11\60\2\70\1\0\2\60\1\71" +
      "\1\61\1\41\2\60\42\12\1\0\1\72\2\12\17\0" +
      "\2\12\1\73\1\74\3\12\1\75\3\12\1\76\1\12" +
      "\1\77\24\12\1\0\1\72\2\12\17\0\5\12\1\100" +
      "\22\12\1\101\11\12\1\0\1\72\2\12\17\0\1\12" +
      "\1\102\13\12\1\103\24\12\1\0\1\72\2\12\17\0" +
      "\4\12\1\104\1\105\10\12\1\106\23\12\1\0\1\72" +
      "\2\12\17\0\13\12\1\107\26\12\1\0\1\72\2\12" +
      "\17\0\7\12\1\110\1\111\2\12\1\112\26\12\1\0" +
      "\1\72\2\12\17\0\5\12\1\113\34\12\1\0\1\72" +
      "\2\12\17\0\2\12\1\114\1\74\3\12\1\115\3\12" +
      "\1\116\1\12\1\117\24\12\1\0\1\72\2\12\17\0" +
      "\2\12\1\120\4\12\1\121\5\12\1\122\4\12\1\123" +
      "\17\12\1\0\1\72\2\12\17\0\4\12\1\124\2\12" +
      "\1\103\1\125\2\12\1\126\2\12\1\127\1\130\13\12" +
      "\1\131\6\12\1\0\1\72\2\12\17\0\1\12\1\132" +
      "\2\12\1\133\35\12\1\0\1\72\2\12\17\0\1\12" +
      "\1\134\40\12\1\0\1\72\2\12\17\0\3\12\1\135" +
      "\1\12\1\136\2\12\1\137\1\12\1\140\1\12\1\141" +
      "\1\12\1\142\1\12\1\143\1\144\1\12\1\145\16\12" +
      "\1\0\1\72\2\12\17\0\1\12\1\146\2\12\1\147" +
      "\2\12\1\150\3\12\1\151\1\12\1\152\24\12\1\0" +
      "\1\72\2\12\17\0\2\12\1\153\10\12\1\154\26\12" +
      "\1\0\1\72\2\12\17\0\2\12\1\155\4\12\1\156" +
      "\3\12\1\157\1\12\1\160\24\12\1\0\1\72\2\12" +
      "\17\0\7\12\1\161\32\12\1\0\1\72\2\12\17\0" +
      "\2\12\1\162\37\12\1\0\1\72\2\12\21\0\1\163" +
      "\24\0\1\35\1\0\2\35\2\0\2\35\1\0\1\35" +
      "\4\0\1\35\1\164\16\0\12\12\1\165\27\12\1\0" +
      "\1\72\2\12\17\0\7\12\1\166\32\12\1\0\1\72" +
      "\2\12\71\0\1\167\3\0\1\170\61\0\2\45\3\0" +
      "\1\45\56\0\1\171\12\0\50\50\1\0\2\50\1\0" +
      "\10\50\1\0\53\172\3\0\7\172\51\54\1\0\1\54" +
      "\1\0\10\54\1\0\42\55\1\0\1\173\2\55\17\0" +
      "\42\57\2\0\2\57\17\0\61\174\1\0\3\174\5\57" +
      "\1\175\34\57\2\0\2\57\17\0\5\57\1\176\34\57" +
      "\2\0\2\57\17\0\14\57\1\177\25\57\2\0\2\57" +
      "\17\0\13\57\1\200\26\57\2\0\2\57\17\0\7\57" +
      "\1\201\32\57\2\0\2\57\17\0\2\57\1\202\37\57" +
      "\2\0\2\57\72\0\2\70\70\0\1\71\4\0\3\12" +
      "\1\203\5\12\1\204\2\12\1\205\1\12\1\206\1\12" +
      "\1\207\21\12\1\0\1\72\2\12\17\0\1\12\1\102" +
      "\40\12\1\0\1\72\2\12\17\0\14\12\1\210\25\12" +
      "\1\0\1\72\2\12\17\0\4\12\1\211\35\12\1\0" +
      "\1\72\2\12\17\0\5\12\1\212\14\12\1\213\17\12" +
      "\1\0\1\72\2\12\17\0\21\12\1\214\20\12\1\0" +
      "\1\72\2\12\17\0\16\12\1\215\15\12\1\216\5\12" +
      "\1\0\1\72\2\12\17\0\7\12\1\217\32\12\1\0" +
      "\1\72\2\12\17\0\5\12\1\150\34\12\1\0\1\72" +
      "\2\12\17\0\7\12\1\220\32\12\1\0\1\72\2\12" +
      "\17\0\7\12\1\221\2\12\1\222\27\12\1\0\1\72" +
      "\2\12\17\0\12\12\1\223\3\12\1\224\3\12\1\225" +
      "\17\12\1\0\1\72\2\12\17\0\3\12\1\132\1\12" +
      "\1\226\34\12\1\0\1\72\2\12\17\0\1\12\1\117" +
      "\3\12\1\227\2\12\1\230\31\12\1\0\1\72\2\12" +
      "\17\0\13\12\1\231\1\12\1\232\24\12\1\0\1\72" +
      "\2\12\17\0\1\12\1\233\40\12\1\0\1\72\2\12" +
      "\17\0\3\12\1\234\6\12\1\223\10\12\1\235\16\12" +
      "\1\0\1\72\2\12\17\0\3\12\1\236\1\12\1\237" +
      "\1\240\33\12\1\0\1\72\2\12\17\0\11\12\1\241" +
      "\14\12\1\242\13\12\1\0\1\72\2\12\17\0\14\12" +
      "\1\243\10\12\1\224\14\12\1\0\1\72\2\12\17\0" +
      "\12\12\1\240\27\12\1\0\1\72\2\12\17\0\1\12" +
      "\1\244\40\12\1\0\1\72\2\12\17\0\5\12\1\245" +
      "\34\12\1\0\1\72\2\12\17\0\3\12\1\246\24\12" +
      "\1\150\11\12\1\0\1\72\2\12\17\0\40\12\1\150" +
      "\1\12\1\0\1\72\2\12\17\0\11\12\1\150\11\12" +
      "\1\247\16\12\1\0\1\72\2\12\17\0\7\12\1\250" +
      "\32\12\1\0\1\72\2\12\17\0\1\12\1\251\40\12" +
      "\1\0\1\72\2\12\17\0\10\12\1\252\31\12\1\0" +
      "\1\72\2\12\17\0\7\12\1\253\5\12\1\254\24\12" +
      "\1\0\1\72\2\12\17\0\1\12\1\240\40\12\1\0" +
      "\1\72\2\12\17\0\3\12\1\255\36\12\1\0\1\72" +
      "\2\12\17\0\15\12\1\256\24\12\1\0\1\72\2\12" +
      "\17\0\15\12\1\257\24\12\1\0\1\72\2\12\17\0" +
      "\22\12\1\132\1\12\1\132\15\12\1\0\1\72\2\12" +
      "\17\0\10\12\1\132\31\12\1\0\1\72\2\12\17\0" +
      "\7\12\1\103\32\12\1\0\1\72\2\12\17\0\14\12" +
      "\1\260\25\12\1\0\1\72\2\12\17\0\16\12\1\261" +
      "\23\12\1\0\1\72\2\12\17\0\2\12\1\262\11\12" +
      "\1\150\25\12\1\0\1\72\2\12\17\0\13\12\1\145" +
      "\26\12\1\0\1\72\2\12\17\0\12\12\1\150\27\12" +
      "\1\0\1\72\2\12\17\0\4\12\1\263\35\12\1\0" +
      "\1\72\2\12\17\0\12\12\1\264\27\12\1\0\1\72" +
      "\2\12\17\0\12\12\1\265\3\12\1\150\6\12\1\150" +
      "\14\12\1\0\1\72\2\12\17\0\1\12\1\266\40\12" +
      "\1\0\1\72\2\12\17\0\7\12\1\267\32\12\1\0" +
      "\1\72\2\12\17\0\4\12\1\270\1\271\2\12\1\272" +
      "\1\12\1\150\27\12\1\0\1\72\2\12\17\0\14\12" +
      "\1\273\25\12\1\0\1\72\2\12\17\0\12\12\1\274" +
      "\27\12\1\0\1\72\2\12\17\0\21\12\1\275\20\12" +
      "\1\0\1\72\2\12\17\0\3\12\1\276\36\12\1\0" +
      "\1\72\2\12\17\0\3\12\1\277\36\12\1\0\1\72" +
      "\2\12\17\0\2\12\1\300\37\12\1\0\1\72\2\12" +
      "\46\0\1\301\1\0\2\301\2\0\2\301\1\0\1\301" +
      "\2\0\1\302\1\0\1\301\1\0\1\302\17\0\1\163" +
      "\24\0\1\303\1\0\2\303\2\0\2\303\1\0\1\303" +
      "\4\0\1\303\1\304\16\0\13\12\1\305\26\12\1\0" +
      "\1\72\2\12\17\0\16\12\1\150\23\12\1\0\1\72" +
      "\2\12\17\0\53\167\3\0\7\167\61\174\1\306\3\174" +
      "\3\57\1\307\36\57\2\0\2\57\17\0\14\57\1\310" +
      "\25\57\2\0\2\57\17\0\4\57\1\311\35\57\2\0" +
      "\2\57\17\0\3\57\1\312\36\57\2\0\2\57\17\0" +
      "\2\57\1\313\37\57\2\0\2\57\17\0\4\12\1\314" +
      "\35\12\1\0\1\72\2\12\17\0\13\12\1\315\26\12" +
      "\1\0\1\72\2\12\17\0\2\12\1\316\37\12\1\0" +
      "\1\72\2\12\17\0\10\12\1\317\31\12\1\0\1\72" +
      "\2\12\17\0\2\12\1\320\37\12\1\0\1\72\2\12" +
      "\17\0\17\12\1\240\22\12\1\0\1\72\2\12\17\0" +
      "\5\12\1\220\34\12\1\0\1\72\2\12\17\0\22\12" +
      "\1\321\17\12\1\0\1\72\2\12\17\0\7\12\1\322" +
      "\32\12\1\0\1\72\2\12\17\0\13\12\1\323\26\12" +
      "\1\0\1\72\2\12\17\0\27\12\1\150\12\12\1\0" +
      "\1\72\2\12\17\0\11\12\1\324\30\12\1\0\1\72" +
      "\2\12\17\0\11\12\1\150\30\12\1\0\1\72\2\12" +
      "\17\0\22\12\1\150\17\12\1\0\1\72\2\12\17\0" +
      "\13\12\1\325\26\12\1\0\1\72\2\12\17\0\2\12" +
      "\1\326\14\12\1\327\22\12\1\0\1\72\2\12\17\0" +
      "\2\12\1\126\37\12\1\0\1\72\2\12\17\0\2\12" +
      "\1\330\37\12\1\0\1\72\2\12\17\0\15\12\1\331" +
      "\24\12\1\0\1\72\2\12\17\0\2\12\1\132\37\12" +
      "\1\0\1\72\2\12\17\0\22\12\1\332\17\12\1\0" +
      "\1\72\2\12\17\0\3\12\1\333\36\12\1\0\1\72" +
      "\2\12\17\0\13\12\1\330\26\12\1\0\1\72\2\12" +
      "\17\0\3\12\1\334\36\12\1\0\1\72\2\12\17\0" +
      "\2\12\1\335\10\12\1\132\26\12\1\0\1\72\2\12" +
      "\17\0\13\12\1\336\26\12\1\0\1\72\2\12\17\0" +
      "\14\12\1\337\25\12\1\0\1\72\2\12\17\0\3\12" +
      "\1\150\36\12\1\0\1\72\2\12\17\0\7\12\1\251" +
      "\32\12\1\0\1\72\2\12\17\0\2\12\1\150\37\12" +
      "\1\0\1\72\2\12\17\0\27\12\1\150\1\12\1\340" +
      "\10\12\1\0\1\72\2\12\17\0\14\12\1\341\25\12" +
      "\1\0\1\72\2\12\17\0\4\12\1\145\35\12\1\0" +
      "\1\72\2\12\17\0\21\12\1\342\20\12\1\0\1\72" +
      "\2\12\17\0\12\12\1\343\27\12\1\0\1\72\2\12" +
      "\17\0\21\12\1\242\20\12\1\0\1\72\2\12\17\0" +
      "\3\12\1\132\36\12\1\0\1\72\2\12\17\0\7\12" +
      "\1\240\32\12\1\0\1\72\2\12\17\0\6\12\1\240" +
      "\33\12\1\0\1\72\2\12\17\0\31\12\1\150\6\12" +
      "\1\344\1\12\1\0\1\72\2\12\17\0\2\12\1\335" +
      "\20\12\1\235\16\12\1\0\1\72\2\12\17\0\16\12" +
      "\1\277\23\12\1\0\1\72\2\12\17\0\5\12\1\215" +
      "\34\12\1\0\1\72\2\12\17\0\1\12\1\345\40\12" +
      "\1\0\1\72\2\12\17\0\2\12\1\211\37\12\1\0" +
      "\1\72\2\12\17\0\1\12\1\346\40\12\1\0\1\72" +
      "\2\12\17\0\5\12\1\226\34\12\1\0\1\72\2\12" +
      "\17\0\17\12\1\150\22\12\1\0\1\72\2\12\17\0" +
      "\7\12\1\347\32\12\1\0\1\72\2\12\17\0\12\12" +
      "\1\350\27\12\1\0\1\72\2\12\17\0\10\12\1\150" +
      "\31\12\1\0\1\72\2\12\17\0\5\12\1\351\34\12" +
      "\1\0\1\72\2\12\17\0\3\12\1\352\15\12\1\353" +
      "\20\12\1\0\1\72\2\12\17\0\10\12\1\354\31\12" +
      "\1\0\1\72\2\12\17\0\1\12\1\355\40\12\1\0" +
      "\1\72\2\12\17\0\3\12\1\356\36\12\1\0\1\72" +
      "\2\12\17\0\4\12\1\357\35\12\1\0\1\72\2\12" +
      "\17\0\2\12\1\360\37\12\1\0\1\72\2\12\17\0" +
      "\17\12\1\132\22\12\1\0\1\72\2\12\17\0\16\12" +
      "\1\132\23\12\1\0\1\72\2\12\46\0\1\301\1\0" +
      "\2\301\2\0\2\301\1\0\1\301\4\0\1\301\21\0" +
      "\1\163\24\0\1\303\1\0\2\303\2\0\2\303\1\0" +
      "\1\303\4\0\1\303\1\361\45\0\1\362\1\0\2\362" +
      "\2\0\2\362\1\0\1\362\4\0\1\362\1\363\16\0" +
      "\5\12\1\364\34\12\1\0\1\72\2\12\17\0\13\57" +
      "\1\365\26\57\2\0\2\57\17\0\1\57\1\366\40\57" +
      "\2\0\2\57\17\0\5\57\1\367\34\57\2\0\2\57" +
      "\17\0\17\57\1\365\22\57\2\0\2\57\17\0\16\57" +
      "\1\365\23\57\2\0\2\57\17\0\1\12\1\370\40\12" +
      "\1\0\1\72\2\12\17\0\20\12\1\371\21\12\1\0" +
      "\1\72\2\12\17\0\30\12\1\372\11\12\1\0\1\72" +
      "\2\12\17\0\15\12\1\373\24\12\1\0\1\72\2\12" +
      "\17\0\1\12\1\374\40\12\1\0\1\72\2\12\17\0" +
      "\13\12\1\375\26\12\1\0\1\72\2\12\17\0\15\12" +
      "\1\376\24\12\1\0\1\72\2\12\17\0\22\12\1\377" +
      "\17\12\1\0\1\72\2\12\17\0\15\12\1\u0100\24\12" +
      "\1\0\1\72\2\12\17\0\5\12\1\u0101\34\12\1\0" +
      "\1\72\2\12\17\0\3\12\1\u0102\36\12\1\0\1\72" +
      "\2\12\17\0\7\12\1\253\32\12\1\0\1\72\2\12" +
      "\17\0\1\12\1\150\40\12\1\0\1\72\2\12\17\0" +
      "\3\12\1\242\36\12\1\0\1\72\2\12\17\0\34\12" +
      "\1\u0103\5\12\1\0\1\72\2\12\17\0\2\12\1\u0104" +
      "\37\12\1\0\1\72\2\12\17\0\3\12\1\u0105\36\12" +
      "\1\0\1\72\2\12\17\0\1\12\1\u0106\40\12\1\0" +
      "\1\72\2\12\17\0\4\12\1\u0107\35\12\1\0\1\72" +
      "\2\12\17\0\3\12\1\264\36\12\1\0\1\72\2\12" +
      "\17\0\32\12\1\150\7\12\1\0\1\72\2\12\17\0" +
      "\2\12\1\u0102\37\12\1\0\1\72\2\12\17\0\17\12" +
      "\1\u0108\22\12\1\0\1\72\2\12\17\0\3\12\1\u0109" +
      "\36\12\1\0\1\72\2\12\17\0\31\12\1\u010a\10\12" +
      "\1\0\1\72\2\12\17\0\2\12\1\u010b\37\12\1\0" +
      "\1\72\2\12\17\0\15\12\1\u010c\24\12\1\0\1\72" +
      "\2\12\17\0\3\12\1\u010d\36\12\1\0\1\72\2\12" +
      "\17\0\2\12\1\u010e\37\12\1\0\1\72\2\12\17\0" +
      "\3\12\1\u010f\36\12\1\0\1\72\2\12\17\0\15\12" +
      "\1\u0110\24\12\1\0\1\72\2\12\17\0\15\12\1\u0111" +
      "\24\12\1\0\1\72\2\12\17\0\2\12\1\u0112\37\12" +
      "\1\0\1\72\2\12\17\0\2\12\1\u0108\37\12\1\0" +
      "\1\72\2\12\17\0\7\12\1\u0113\32\12\1\0\1\72" +
      "\2\12\17\0\11\12\1\u0114\30\12\1\0\1\72\2\12" +
      "\17\0\34\12\1\u0115\5\12\1\0\1\72\2\12\65\0" +
      "\1\363\45\0\1\362\1\0\2\362\2\0\2\362\1\0" +
      "\1\362\4\0\1\362\1\u0116\45\0\1\362\1\0\2\362" +
      "\2\0\2\362\1\0\1\362\4\0\1\362\17\0\34\12" +
      "\1\u0117\5\12\1\0\1\72\2\12\17\0\2\57\1\u0118" +
      "\37\57\2\0\2\57\17\0\3\57\1\365\36\57\2\0" +
      "\2\57\17\0\5\12\1\132\34\12\1\0\1\72\2\12" +
      "\17\0\2\12\1\u0119\37\12\1\0\1\72\2\12\17\0" +
      "\34\12\1\u011a\5\12\1\0\1\72\2\12\17\0\21\12" +
      "\1\226\20\12\1\0\1\72\2\12\17\0\12\12\1\242" +
      "\27\12\1\0\1\72\2\12\17\0\11\12\1\u011b\30\12" +
      "\1\0\1\72\2\12\17\0\5\12\1\145\34\12\1\0" +
      "\1\72\2\12\17\0\2\12\1\u011c\37\12\1\0\1\72" +
      "\2\12\17\0\3\12\1\246\36\12\1\0\1\72\2\12" +
      "\17\0\34\12\1\u011d\5\12\1\0\1\72\2\12\17\0" +
      "\34\12\1\u011e\5\12\1\0\1\72\2\12\17\0\6\12" +
      "\1\u011f\1\12\1\u0120\31\12\1\0\1\72\2\12\17\0" +
      "\1\12\1\132\40\12\1\0\1\72\2\12\17\0\2\12" +
      "\1\103\37\12\1\0\1\72\2\12\17\0\12\12\1\u0121" +
      "\27\12\1\0\1\72\2\12\17\0\5\12\1\u0122\34\12" +
      "\1\0\1\72\2\12\17\0\2\12\1\145\37\12\1\0" +
      "\1\72\2\12\17\0\7\12\1\u0123\32\12\1\0\1\72" +
      "\2\12\17\0\14\12\1\u0124\25\12\1\0\1\72\2\12" +
      "\17\0\14\12\1\242\25\12\1\0\1\72\2\12\17\0" +
      "\7\12\1\u0125\32\12\1\0\1\72\2\12\17\0\34\12" +
      "\1\u0126\5\12\1\0\1\72\2\12\17\0\7\12\1\376" +
      "\32\12\1\0\1\72\2\12\17\0\3\12\1\u0127\36\12" +
      "\1\0\1\72\2\12\17\0\21\12\1\u0128\20\12\1\0" +
      "\1\72\2\12\17\0\5\12\1\u0129\34\12\1\0\1\72" +
      "\2\12\17\0\2\12\1\u012a\37\12\1\0\1\72\2\12" +
      "\17\0\3\12\1\u012b\1\12\1\u012c\1\u012d\1\u012e\1\u012f" +
      "\1\u0130\1\u0131\2\12\1\u0132\1\12\1\u0133\1\12\1\u0134" +
      "\1\u0135\1\12\1\u0136\6\12\1\u0137\6\12\1\0\1\72" +
      "\2\12\46\0\1\u0116\1\0\2\u0116\2\0\2\u0116\1\0" +
      "\1\u0116\4\0\1\u0116\17\0\12\12\1\u0138\27\12\1\0" +
      "\1\72\2\12\17\0\14\57\1\u0139\25\57\2\0\2\57" +
      "\17\0\34\12\1\u013a\5\12\1\0\1\72\2\12\17\0" +
      "\1\12\1\u013b\1\12\1\u013c\6\12\1\u013d\27\12\1\0" +
      "\1\72\2\12\17\0\34\12\1\u013e\5\12\1\0\1\72" +
      "\2\12\17\0\34\12\1\u013f\5\12\1\0\1\72\2\12" +
      "\17\0\22\12\1\u0140\17\12\1\0\1\72\2\12\17\0" +
      "\1\12\1\u0141\40\12\1\0\1\72\2\12\17\0\7\12" +
      "\1\u0142\32\12\1\0\1\72\2\12\17\0\15\12\1\117" +
      "\24\12\1\0\1\72\2\12\17\0\2\12\1\u0143\37\12" +
      "\1\0\1\72\2\12\17\0\22\12\1\132\17\12\1\0" +
      "\1\72\2\12\17\0\3\12\1\u0144\36\12\1\0\1\72" +
      "\2\12\17\0\15\12\1\u0145\24\12\1\0\1\72\2\12" +
      "\17\0\13\12\1\103\26\12\1\0\1\72\2\12\17\0" +
      "\7\12\1\u0146\32\12\1\0\1\72\2\12\17\0\34\12" +
      "\1\u0147\5\12\1\0\1\72\2\12\17\0\3\12\1\u0148" +
      "\36\12\1\0\1\72\2\12\17\0\21\12\1\251\20\12" +
      "\1\0\1\72\2\12\17\0\5\12\1\240\34\12\1\0" +
      "\1\72\2\12\17\0\7\12\1\u0149\32\12\1\0\1\72" +
      "\2\12\17\0\13\12\1\u014a\26\12\1\0\1\72\2\12" +
      "\17\0\13\12\1\u014b\26\12\1\0\1\72\2\12\17\0" +
      "\12\12\1\u014c\27\12\1\0\1\72\2\12\17\0\2\12" +
      "\1\u014d\37\12\1\0\1\72\2\12\17\0\7\12\1\u014e" +
      "\3\12\1\u014f\26\12\1\0\1\72\2\12\17\0\2\12" +
      "\1\u0150\1\12\1\u0151\35\12\1\0\1\72\2\12\17\0" +
      "\22\12\1\220\17\12\1\0\1\72\2\12\17\0\13\12" +
      "\1\u0152\26\12\1\0\1\72\2\12\17\0\13\12\1\u0153" +
      "\26\12\1\0\1\72\2\12\17\0\7\12\1\u0154\5\12" +
      "\1\u0155\24\12\1\0\1\72\2\12\17\0\2\12\1\u0156" +
      "\37\12\1\0\1\72\2\12\17\0\4\12\1\u0157\35\12" +
      "\1\0\1\72\2\12\17\0\3\12\1\u0158\36\12\1\0" +
      "\1\72\2\12\17\0\15\57\1\u0159\24\57\2\0\2\57" +
      "\17\0\5\12\1\337\12\12\1\u015a\21\12\1\0\1\72" +
      "\2\12\17\0\2\12\1\u015b\37\12\1\0\1\72\2\12" +
      "\17\0\2\12\1\117\37\12\1\0\1\72\2\12\17\0" +
      "\16\12\1\127\23\12\1\0\1\72\2\12\17\0\3\12" +
      "\1\u015c\36\12\1\0\1\72\2\12\17\0\4\12\1\u015d" +
      "\35\12\1\0\1\72\2\12\17\0\7\12\1\u015e\32\12" +
      "\1\0\1\72\2\12\17\0\2\12\1\u015f\37\12\1\0" +
      "\1\72\2\12\17\0\1\12\1\117\40\12\1\0\1\72" +
      "\2\12\17\0\21\12\1\347\20\12\1\0\1\72\2\12" +
      "\17\0\4\12\1\331\35\12\1\0\1\72\2\12\17\0" +
      "\3\12\1\226\36\12\1\0\1\72\2\12\17\0\22\12" +
      "\1\u0160\17\12\1\0\1\72\2\12\17\0\12\12\1\u0161" +
      "\27\12\1\0\1\72\2\12\17\0\11\12\1\u0162\30\12" +
      "\1\0\1\72\2\12\17\0\25\12\1\150\14\12\1\0" +
      "\1\72\2\12\17\0\1\12\1\u0163\40\12\1\0\1\72" +
      "\2\12\17\0\13\12\1\u0164\26\12\1\0\1\72\2\12" +
      "\17\0\15\12\1\u0165\24\12\1\0\1\72\2\12\17\0" +
      "\5\12\1\u0144\2\12\1\u0166\31\12\1\0\1\72\2\12" +
      "\17\0\5\12\1\337\34\12\1\0\1\72\2\12\17\0" +
      "\21\12\1\u0167\20\12\1\0\1\72\2\12\17\0\23\12" +
      "\1\u0168\16\12\1\0\1\72\2\12\17\0\4\12\1\330" +
      "\35\12\1\0\1\72\2\12\17\0\11\12\1\u0169\30\12" +
      "\1\0\1\72\2\12\17\0\6\12\1\u016a\33\12\1\0" +
      "\1\72\2\12\17\0\24\12\1\u016b\15\12\1\0\1\72" +
      "\2\12\17\0\15\12\1\330\24\12\1\0\1\72\2\12" +
      "\17\0\15\12\1\u016c\24\12\1\0\1\72\2\12\17\0" +
      "\1\12\1\u016d\40\12\1\0\1\72\2\12\17\0\3\57" +
      "\1\u016e\36\57\2\0\2\57\17\0\15\12\1\u016f\24\12" +
      "\1\0\1\72\2\12\17\0\16\12\1\u0170\23\12\1\0" +
      "\1\72\2\12\17\0\13\12\1\u0171\26\12\1\0\1\72" +
      "\2\12\17\0\1\12\1\u0172\40\12\1\0\1\72\2\12" +
      "\17\0\12\12\1\u0173\27\12\1\0\1\72\2\12\17\0" +
      "\21\12\1\u0174\20\12\1\0\1\72\2\12\17\0\2\12" +
      "\1\u0175\37\12\1\0\1\72\2\12\17\0\2\12\1\u0176" +
      "\37\12\1\0\1\72\2\12\17\0\2\12\1\u0177\37\12" +
      "\1\0\1\72\2\12\17\0\11\12\1\u0178\30\12\1\0" +
      "\1\72\2\12\17\0\35\12\1\u0179\4\12\1\0\1\72" +
      "\2\12\17\0\16\12\1\u017a\23\12\1\0\1\72\2\12" +
      "\17\0\10\12\1\u017b\31\12\1\0\1\72\2\12\17\0" +
      "\13\12\1\211\26\12\1\0\1\72\2\12\17\0\3\12" +
      "\1\u017c\36\12\1\0\1\72\2\12\17\0\16\12\1\u017d" +
      "\23\12\1\0\1\72\2\12\17\0\6\12\1\150\33\12" +
      "\1\0\1\72\2\12\17\0\12\12\1\u017e\27\12\1\0" +
      "\1\72\2\12\17\0\1\12\1\u017f\40\12\1\0\1\72" +
      "\2\12\17\0\7\12\1\u0180\32\12\1\0\1\72\2\12" +
      "\17\0\2\57\1\365\37\57\2\0\2\57\17\0\10\12" +
      "\1\u0181\31\12\1\0\1\72\2\12\17\0\10\12\1\u0182" +
      "\31\12\1\0\1\72\2\12\17\0\26\12\1\u0105\13\12" +
      "\1\0\1\72\2\12\17\0\7\12\1\u0183\32\12\1\0" +
      "\1\72\2\12\17\0\3\12\1\u0184\36\12\1\0\1\72" +
      "\2\12\17\0\4\12\1\u0185\35\12\1\0\1\72\2\12" +
      "\17\0\5\12\1\u0186\34\12\1\0\1\72\2\12\17\0" +
      "\16\12\1\u0187\23\12\1\0\1\72\2\12\17\0\12\12" +
      "\1\u0188\27\12\1\0\1\72\2\12\17\0\15\12\1\240" +
      "\24\12\1\0\1\72\2\12\17\0\36\12\1\u0189\3\12" +
      "\1\0\1\72\2\12\17\0\34\12\1\u018a\5\12\1\0" +
      "\1\72\2\12\17\0\7\12\1\u018b\32\12\1\0\1\72" +
      "\2\12\17\0\1\12\1\u018c\40\12\1\0\1\72\2\12" +
      "\17\0\15\12\1\u018d\24\12\1\0\1\72\2\12\17\0" +
      "\34\12\1\u018e\5\12\1\0\1\72\2\12\17\0\3\12" +
      "\1\224\36\12\1\0\1\72\2\12\17\0\5\12\1\u018f" +
      "\34\12\1\0\1\72\2\12\17\0\4\12\1\u0190\35\12" +
      "\1\0\1\72\2\12\17\0\15\12\1\250\24\12\1\0" +
      "\1\72\2\12\17\0\34\12\1\u0191\5\12\1\0\1\72" +
      "\2\12\17\0\7\12\1\u0192\32\12\1\0\1\72\2\12" +
      "\17\0\1\12\1\u0193\40\12\1\0\1\72\2\12\17\0" +
      "\3\12\1\u0194\36\12\1\0\1\72\2\12\17\0\15\12" +
      "\1\u0195\24\12\1\0\1\72\2\12\17\0\3\12\1\u0196" +
      "\36\12\1\0\1\72\2\12\17\0\32\12\1\u0197\7\12" +
      "\1\0\1\72\2\12\17\0\24\12\1\u0136\15\12\1\0" +
      "\1\72\2\12\17\0\12\12\1\u0198\27\12\1\0\1\72" +
      "\2\12\17\0\15\12\1\u0199\24\12\1\0\1\72\2\12" +
      "\17\0\1\12\1\242\40\12\1\0\1\72\2\12\17\0" +
      "\7\12\1\u019a\32\12\1\0\1\72\2\12\17\0\14\12" +
      "\1\u019b\25\12\1\0\1\72\2\12\17\0\2\12\1\u019c" +
      "\37\12\1\0\1\72\2\12\17\0\21\12\1\u019d\20\12" +
      "\1\0\1\72\2\12\17\0\5\12\1\u0199\34\12\1\0" +
      "\1\72\2\12\17\0\12\12\1\u019e\27\12\1\0\1\72" +
      "\2\12\17\0\7\12\1\u019f\32\12\1\0\1\72\2\12" +
      "\17\0\1\12\1\u01a0\40\12\1\0\1\72\2\12\17\0" +
      "\15\12\1\u01a1\24\12\1\0\1\72\2\12\17\0\31\12" +
      "\1\150\10\12\1\0\1\72\2\12\17\0\2\12\1\u0150" +
      "\37\12\1\0\1\72\2\12\17\0\21\12\1\240\20\12" +
      "\1\0\1\72\2\12\17\0\5\12\1\u01a2\34\12\1\0" +
      "\1\72\2\12\17\0\7\12\1\u01a3\32\12\1\0\1\72" +
      "\2\12\17\0\13\12\1\u01a4\26\12\1\0\1\72\2\12" +
      "\17\0\7\12\1\u01a5\32\12\1\0\1\72\2\12\17\0" +
      "\6\12\1\u01a6\33\12\1\0\1\72\2\12\17\0\15\12" +
      "\1\u01a7\24\12\1\0\1\72\2\12\17\0\11\12\1\166" +
      "\30\12\1\0\1\72\2\12\17\0\34\12\1\u01a8\5\12" +
      "\1\0\1\72\2\12\17\0\6\12\1\u01a9\33\12\1\0" +
      "\1\72\2\12\17\0\11\12\1\u01aa\30\12\1\0\1\72" +
      "\2\12\17\0\20\12\1\242\21\12\1\0\1\72\2\12" +
      "\17\0\7\12\1\224\32\12\1\0\1\72\2\12\17\0" +
      "\3\12\1\231\36\12\1\0\1\72\2\12\17\0\11\12" +
      "\1\u01ab\30\12\1\0\1\72\2\12\17\0\24\12\1\150" +
      "\15\12\1\0\1\72\2\12\17\0\16\12\1\u01ac\23\12" +
      "\1\0\1\72\2\12\17\0\13\12\1\u014f\26\12\1\0" +
      "\1\72\2\12\17\0\13\12\1\u01ad\26\12\1\0\1\72" +
      "\2\12\17\0\5\12\1\u0114\34\12\1\0\1\72\2\12" +
      "\17\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[21359];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
      "Unkown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\10\7\0\26\1\4\11\2\1\1\11\2\1" +
      "\2\11\1\0\2\1\1\11\1\1\1\11\11\1\1\0" +
      "\70\1\1\0\4\1\3\11\2\0\105\1\1\0\1\1" +
      "\1\0\1\1\1\11\52\1\1\0\1\1\1\0\272\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[429];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Segment s;
  private int offsetShift;
  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public AqlTokenMaker() {
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;

    // Start off in the proper state.
    int state = Token.NULL;
    switch (initialTokenType) {
      case Token.COMMENT_MULTILINE:
        state = COMMENT;
        break;
      default:
        state = Token.NULL;
    }

    s = text;
    try {
      yyreset(zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return new TokenImpl();
    }
  }

  /**
   * Adds the token to the token list.
   * @param tokenType
   */
  private void addToken(int tokenType) {
    addToken(zzStartRead, zzMarkedPos - 1, tokenType);
  }

  /**
   * Adds the token to the token list.
   * @param start
   * @param end
   * @param tokenType
   */
  private void addToken(int start, int end, int tokenType) {
    int so = start + offsetShift;
    addToken(zzBuffer, start, end, tokenType, so);
  }

  /**
   * Adds the token to the token list.
   * @param array
   * @param start
   * @param end
   * @param tokenType
   * @param startOffset
   */
  public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
    super.addToken(array, start, end, tokenType, startOffset);
    zzStartRead = zzMarkedPos;
  }

  /**
   * Refills the input buffer.
   * 
   * @return <code>true</code> if EOF was reached, otherwise
   *         <code>false</code>.
   */
  private boolean zzRefill() {
    return zzCurrentPos >= s.offset + s.count;
  }

  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   * 
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   * 
   * @param reader the new input stream
   */
  public final void yyreset(Reader reader) {
    // 's' has been updated.
    zzBuffer = s.array;
    /*
     * We replaced the line below with the two below it because zzRefill
     * no longer "refills" the buffer (since the way we do it, it's always
     * "full" the first time through, since it points to the segment's
     * array). So, we assign zzEndRead here.
     */
    // zzStartRead = zzEndRead = s.offset;
    zzStartRead = s.offset;
    zzEndRead = zzStartRead + s.count - 1;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
    zzLexicalState = YYINITIAL;
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
  }

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param in the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0; /* index in packed string */
    int j = 0; /* index in unpacked array */
    while (i < 1948) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do
        map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: {
          addToken(Token.IDENTIFIER);
        }
        case 27:
          break;
        case 2: {
          addToken(Token.LITERAL_NUMBER_FLOAT);
        }
        case 28:
          break;
        case 3: {
          addToken(Token.ERROR_CHAR);
        }
        case 29:
          break;
        case 4: {
          addToken(Token.SEPARATOR);
        }
        case 30:
          break;
        case 5: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          yybegin(DOUBLE_QUOTED_STRING);
        }
        case 31:
          break;
        case 6: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          yybegin(SINGLE_QUOTED_STRING);
        }
        case 32:
          break;
        case 7: {
          addToken(Token.WHITESPACE);
        }
        case 33:
          break;
        case 8: {
        }
        case 34:
          break;
        case 9: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
        }
        case 35:
          break;
        case 10: {
          yybegin(YYINITIAL);
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
        }
        case 36:
          break;
        case 11: {
          addToken(Token.ERROR_STRING_DOUBLE);
          yybegin(YYINITIAL);
        }
        case 37:
          break;
        case 12: {
          addToken(Token.VARIABLE);
          yybegin(YYINITIAL);
        }
        case 38:
          break;
        case 13: {
          addToken(Token.SEPARATOR);
          yybegin(YYINITIAL);
        }
        case 39:
          break;
        case 14: {
          addToken(Token.VARIABLE);
        }
        case 40:
          break;
        case 15: {
          addToken(Token.ERROR_CHAR);
          yybegin(YYINITIAL);
        }
        case 41:
          break;
        case 16: {
          addToken(Token.WHITESPACE);
          yybegin(YYINITIAL);
        }
        case 42:
          break;
        case 17: {
          addToken(Token.RESERVED_WORD);
        }
        case 43:
          break;
        case 18: {
          addToken(Token.FUNCTION);
        }
        case 44:
          break;
        case 19: {
          addToken(Token.COMMENT_EOL);
        }
        case 45:
          break;
        case 20: {
          yybegin(COMMENT);
        }
        case 46:
          break;
        case 21: {
          yybegin(YYINITIAL);
          addToken(zzStartRead, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
        }
        case 47:
          break;
        case 22: {
          addToken(Token.RESERVED_WORD);
          yybegin(YYINITIAL);
        }
        case 48:
          break;
        case 23: {
          addToken(Token.RESERVED_WORD);
          yybegin(FOR);
        }
        case 49:
          break;
        case 24: {
          addToken(Token.RESERVED_WORD);
          yybegin(LET);
        }
        case 50:
          break;
        case 25: {
          addToken(Token.PREPROCESSOR);
        }
        case 51:
          break;
        case 26: {
          addToken(Token.RESERVED_WORD);
          yybegin(COLLECT);
        }
        case 52:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
              case DOUBLE_QUOTED_STRING: {
                addToken(Token.ERROR_STRING_DOUBLE);
                yybegin(YYINITIAL);
              }
              case 430:
                break;
              case SINGLE_QUOTED_STRING: {
                addToken(Token.ERROR_STRING_DOUBLE);
                yybegin(YYINITIAL);
              }
              case 431:
                break;
              default: {
                addNullToken();
                return firstToken;
              }
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

}
