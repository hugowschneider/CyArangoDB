/* The following code was generated by JFlex 1.5.1 */

package com.github.hugowschneider.cyarangodb.internal.flex;

import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>./src/main/jflex/AqlTokenMaker.flex</tt>
 */
public class AqlTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int DOUBLE_QUOTED_STRING = 6;
  public static final int SINGLE_QUOTED_STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0, 1, 1, 2, 2, 3, 3, 4, 4
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\42\1\61\1\54\1\56\1\56\1\55\22\42\1\61\1\42\1\51" +
      "\4\42\1\52\2\60\1\57\1\50\1\60\1\43\1\46\1\53\1\32" +
      "\1\31\1\27\2\45\1\40\1\36\1\45\1\35\1\45\1\42\1\60" +
      "\5\42\1\17\1\21\1\14\1\20\1\4\1\1\1\25\1\24\1\10" +
      "\1\37\1\26\1\11\1\12\1\7\1\2\1\16\1\33\1\3\1\13" +
      "\1\5\1\6\1\15\1\23\1\30\1\22\1\41\1\42\1\62\2\42" +
      "\1\34\1\42\4\0\1\47\25\0\1\60\1\42\1\60\7\42\1\56" +
      "\44\42\1\0\12\42\1\0\4\42\1\0\5\42\27\0\1\42\37\0" +
      "\1\42\u01ca\0\4\42\14\0\16\42\5\0\7\42\1\0\1\42\1\0" +
      "\21\42\165\0\1\42\2\0\2\42\4\0\10\42\1\0\1\42\3\0" +
      "\1\42\1\0\1\42\24\0\1\42\123\0\1\42\213\0\1\42\245\0" +
      "\11\42\46\0\2\42\1\0\7\42\47\0\11\42\55\0\1\42\1\0" +
      "\1\42\2\0\1\42\2\0\1\42\1\0\10\42\33\0\5\42\3\0" +
      "\35\42\13\0\5\42\100\0\12\44\4\42\146\0\1\42\10\0\2\42" +
      "\12\0\1\42\6\0\12\44\3\0\2\42\1\0\20\42\73\0\2\42" +
      "\145\0\16\42\12\44\54\0\4\42\1\0\5\42\56\0\22\42\34\0" +
      "\104\42\1\0\1\42\13\0\67\42\33\0\1\42\144\0\2\42\12\44" +
      "\1\42\7\0\1\42\7\0\1\42\3\0\1\42\10\0\2\42\2\0" +
      "\2\42\26\0\1\42\7\0\1\42\1\0\3\42\4\0\2\42\11\0" +
      "\2\42\2\0\2\42\4\0\10\42\1\0\4\42\2\0\1\42\5\0" +
      "\2\42\12\44\2\0\17\42\3\0\1\42\6\0\4\42\2\0\2\42" +
      "\26\0\1\42\7\0\1\42\2\0\1\42\2\0\1\42\2\0\2\42" +
      "\1\0\1\42\5\0\4\42\2\0\2\42\3\0\3\42\1\0\7\42" +
      "\4\0\1\42\1\0\7\42\12\44\6\0\13\42\3\0\1\42\11\0" +
      "\1\42\3\0\1\42\26\0\1\42\7\0\1\42\2\0\1\42\5\0" +
      "\2\42\12\0\1\42\3\0\1\42\3\0\2\42\1\0\17\42\4\0" +
      "\2\42\12\44\21\42\3\0\1\42\10\0\2\42\2\0\2\42\26\0" +
      "\1\42\7\0\1\42\2\0\1\42\5\0\2\42\11\0\2\42\2\0" +
      "\2\42\3\0\10\42\2\0\4\42\2\0\1\42\5\0\2\42\12\44" +
      "\1\42\1\0\20\42\2\0\1\42\6\0\3\42\3\0\1\42\4\0" +
      "\3\42\2\0\1\42\1\0\1\42\2\0\3\42\2\0\3\42\3\0" +
      "\3\42\14\0\4\42\5\0\3\42\3\0\1\42\4\0\2\42\1\0" +
      "\6\42\1\0\16\42\12\44\21\42\3\0\1\42\10\0\1\42\3\0" +
      "\1\42\27\0\1\42\12\0\1\42\5\0\3\42\10\0\1\42\3\0" +
      "\1\42\4\0\7\42\2\0\1\42\2\0\6\42\4\0\2\42\12\44" +
      "\22\42\2\0\1\42\10\0\1\42\3\0\1\42\27\0\1\42\12\0" +
      "\1\42\5\0\2\42\11\0\1\42\3\0\1\42\4\0\7\42\2\0" +
      "\7\42\1\0\1\42\4\0\2\42\12\44\1\42\2\0\17\42\2\0" +
      "\1\42\10\0\1\42\3\0\1\42\51\0\2\42\10\0\1\42\3\0" +
      "\1\42\5\0\10\42\1\0\10\42\4\0\2\42\12\44\12\42\6\0" +
      "\2\42\2\0\1\42\22\0\3\42\30\0\1\42\11\0\1\42\1\0" +
      "\2\42\7\0\3\42\1\0\4\42\6\0\1\42\1\0\1\42\10\0" +
      "\22\42\2\0\15\42\72\0\5\42\17\0\1\42\12\44\47\42\2\0" +
      "\1\42\1\0\2\42\2\0\1\42\1\0\2\42\1\0\6\42\4\0" +
      "\1\42\7\0\1\42\3\0\1\42\1\0\1\42\1\0\2\42\2\0" +
      "\1\42\15\0\1\42\3\0\2\42\5\0\1\42\1\0\1\42\6\0" +
      "\2\42\12\44\2\42\4\0\40\42\1\0\27\42\2\0\6\42\12\44" +
      "\13\42\1\0\1\42\1\0\1\42\1\0\4\42\12\0\1\42\44\0" +
      "\4\42\24\0\1\42\22\0\1\42\44\0\11\42\1\0\71\42\100\0" +
      "\12\44\6\42\100\0\12\44\4\0\2\42\46\0\1\42\1\0\5\42" +
      "\1\0\2\42\53\0\1\42\u014d\0\1\42\4\0\2\42\7\0\1\42" +
      "\1\0\1\42\4\0\2\42\51\0\1\42\4\0\2\42\41\0\1\42" +
      "\4\0\2\42\7\0\1\42\1\0\1\42\4\0\2\42\17\0\1\42" +
      "\71\0\1\42\4\0\2\42\103\0\2\42\3\0\40\42\20\0\20\42" +
      "\125\0\14\42\u026c\0\2\42\21\0\1\42\32\0\5\42\113\0\3\42" +
      "\3\0\17\42\15\0\1\42\7\0\13\42\25\0\13\42\24\0\14\42" +
      "\15\0\1\42\3\0\1\42\2\0\14\42\124\0\3\42\1\0\4\42" +
      "\2\0\2\42\12\44\41\42\3\0\2\42\12\44\6\42\130\0\10\42" +
      "\53\0\5\42\106\0\12\42\35\0\3\42\14\0\4\42\14\0\12\42" +
      "\12\44\36\0\2\42\5\0\13\42\54\0\4\42\32\0\6\42\12\44" +
      "\46\42\34\0\4\42\77\0\1\42\35\0\2\42\1\0\12\44\6\42" +
      "\12\44\15\42\1\0\130\42\114\0\4\42\12\44\21\42\11\0\14\42" +
      "\60\0\12\44\72\0\14\42\70\0\10\42\12\44\3\42\3\0\12\44" +
      "\44\0\122\42\3\0\1\42\43\0\11\42\347\0\25\42\u011a\0\2\42" +
      "\6\0\2\42\46\0\2\42\6\0\2\42\10\0\1\42\1\0\1\42" +
      "\1\0\1\42\1\0\1\42\37\0\2\42\65\0\1\42\7\0\1\42" +
      "\1\0\3\42\3\0\1\42\7\0\3\42\4\0\2\42\6\0\4\42" +
      "\15\0\5\42\3\0\1\42\7\0\53\42\1\56\1\56\25\42\2\0" +
      "\23\42\1\0\34\42\1\0\15\42\1\0\20\42\15\0\63\42\41\0" +
      "\21\42\1\0\4\42\1\0\2\42\12\0\1\42\1\0\3\42\5\0" +
      "\6\42\1\0\1\42\1\0\1\42\1\0\1\42\4\0\1\42\13\0" +
      "\2\42\4\0\5\42\5\0\4\42\1\0\21\42\51\0\u032d\42\64\0" +
      "\u0716\42\57\0\1\42\57\0\1\42\205\0\6\42\11\0\14\42\46\0" +
      "\1\42\1\0\5\42\1\0\2\42\70\0\7\42\1\0\17\42\30\0" +
      "\11\42\7\0\1\42\7\0\1\42\7\0\1\42\7\0\1\42\7\0" +
      "\1\42\7\0\1\42\7\0\1\42\7\0\1\42\40\0\57\42\1\0" +
      "\u01d5\42\3\0\31\42\17\0\1\42\5\0\2\42\5\0\4\42\126\0" +
      "\2\42\2\0\2\42\3\0\1\42\132\0\1\42\4\0\5\42\51\0" +
      "\3\42\136\0\21\42\33\0\65\42\20\0\u0200\42\u19b6\0\112\42\u51cd\0" +
      "\63\42\u048d\0\103\42\56\0\2\42\u010d\0\3\42\20\0\12\44\2\0" +
      "\24\42\63\0\1\42\12\0\1\42\31\0\7\42\123\0\45\42\11\0" +
      "\2\42\147\0\2\42\4\0\1\42\4\0\14\42\13\0\115\42\60\0" +
      "\30\42\64\0\14\42\105\0\13\42\12\44\6\42\30\0\3\42\1\0" +
      "\4\42\12\44\44\0\2\42\44\0\14\42\35\0\3\42\101\0\16\42" +
      "\1\0\12\44\46\42\67\0\11\42\16\0\2\42\12\44\6\42\27\0" +
      "\3\42\2\0\4\42\103\0\30\42\3\0\2\42\20\0\2\42\5\0" +
      "\12\42\6\0\2\42\6\0\2\42\6\0\11\42\7\0\1\42\7\0" +
      "\221\42\53\0\1\42\2\0\2\42\12\44\6\42\u2ba4\0\14\42\27\0" +
      "\4\42\61\0\u2104\42\u016e\0\2\42\152\0\46\42\7\0\14\42\5\0" +
      "\5\42\14\0\1\42\15\0\1\42\5\0\1\42\1\0\1\42\2\0" +
      "\1\42\2\0\1\42\154\0\41\42\u016b\0\22\42\100\0\2\42\66\0" +
      "\50\42\14\0\4\42\20\0\20\42\7\0\14\42\2\0\30\42\3\0" +
      "\40\42\5\0\1\42\207\0\23\42\12\44\7\42\32\0\4\42\1\0" +
      "\1\42\32\0\13\42\131\0\3\42\6\0\2\42\6\0\2\42\6\0" +
      "\2\42\3\0\43\42";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\5\0\22\1\1\2\2\1\1\3\1\4\1\5\1\0" +
      "\1\6\2\7\1\10\1\11\1\12\1\0\1\10\1\0" +
      "\3\1\1\13\16\1\1\13\23\1\1\14\20\1\1\0" +
      "\1\2\2\1\1\15\1\16\1\17\1\10\17\1\1\14" +
      "\13\1\1\14\5\1\1\14\31\1\1\2\1\0\13\1" +
      "\1\14\47\1\2\14\4\1\1\13\16\1\1\13\7\1" +
      "\1\14\101\1\1\14\57\1\1\14\21\1";

  private static int[] zzUnpackAction() {
    int[] result = new int[375];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165" +
      "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd" +
      "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495" +
      "\0\u04c8\0\u04fb\0\63\0\63\0\63\0\u052e\0\u0561\0\63" +
      "\0\u0594\0\u05c7\0\63\0\63\0\u05fa\0\u062d\0\377\0\u0660" +
      "\0\u0693\0\u06c6\0\377\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5" +
      "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d" +
      "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5" +
      "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d" +
      "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\377\0\u0dbf\0\u0df2" +
      "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a" +
      "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122" +
      "\0\u1155\0\u1188\0\u11bb\0\63\0\63\0\63\0\u11ee\0\u1221" +
      "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9" +
      "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551" +
      "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9" +
      "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881" +
      "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19" +
      "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1" +
      "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49" +
      "\0\u1d7c\0\u1daf\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae" +
      "\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046" +
      "\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de" +
      "\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376" +
      "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e" +
      "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6" +
      "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e" +
      "\0\u2871\0\u28a4\0\u28d7\0\u14eb\0\u280b\0\u290a\0\u293d\0\u2970" +
      "\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08" +
      "\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0" +
      "\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38" +
      "\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0" +
      "\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168" +
      "\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300" +
      "\0\u3333\0\u3366\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498" +
      "\0\u34cb\0\u34fe\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630" +
      "\0\u3663\0\u3696\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8" +
      "\0\u37fb\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960" +
      "\0\u3993\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8" +
      "\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90" +
      "\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28" +
      "\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0" +
      "\0\u3ff3\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158" +
      "\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0" +
      "\0\u4323\0\u4356\0\u4389\0\u43bc\0\u43ef\0\u0f57\0\u4422\0\u4455" +
      "\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u4554\0\u4587\0\u45ba\0\u45ed" +
      "\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[375];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
      "\1\16\1\17\1\20\1\21\1\22\1\6\1\23\1\24" +
      "\1\25\2\6\1\26\2\6\1\27\1\30\1\6\2\30" +
      "\2\6\2\30\1\31\1\30\1\32\3\0\1\30\1\33" +
      "\1\6\1\0\1\34\1\35\1\36\2\37\2\0\1\33" +
      "\1\37\64\0\55\40\2\0\1\41\3\40\51\42\1\43" +
      "\2\42\1\44\5\42\1\45\52\46\1\43\1\46\1\44" +
      "\5\46\1\45\42\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\2\6\1\50\5\6\1\51\1\52\30\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\3\6\1\53\2\6" +
      "\1\54\33\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\2\6\1\55\1\6\1\56\1\57\2\6\1\60\6\6" +
      "\1\61\22\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\7\6\1\62\20\6\1\63\11\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\64\13\6\1\65\22\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\6\6\1\66" +
      "\1\67\6\6\1\70\23\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\2\6\1\71\37\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\7\6\1\72\32\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\2\6\1\73\1\6\1\74" +
      "\1\57\2\6\1\75\6\6\1\76\22\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\4\6\1\77\3\6\1\100" +
      "\6\6\1\101\1\102\21\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\2\6\1\103\3\6\1\104\1\6\1\65" +
      "\1\105\4\6\1\106\5\6\1\107\6\6\1\110\6\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\2\6\1\111" +
      "\1\6\1\112\35\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\2\6\1\113\1\114\2\6\1\115\1\6\1\116" +
      "\6\6\1\117\22\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\5\6\1\120\1\6\1\121\1\6\1\122\1\6" +
      "\1\123\1\124\1\125\1\126\2\6\1\127\3\6\1\130" +
      "\14\6\1\0\1\47\2\6\1\0\1\6\13\0\2\6" +
      "\1\131\1\6\1\132\3\6\1\133\6\6\1\134\22\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\10\6\1\135" +
      "\31\6\1\0\1\47\2\6\1\0\1\6\13\0\4\6" +
      "\1\136\35\6\1\0\1\47\2\6\1\0\1\6\17\0" +
      "\1\137\22\0\1\30\1\0\2\30\2\0\2\30\1\0" +
      "\1\30\4\0\1\30\1\140\1\137\13\0\13\6\1\141" +
      "\26\6\1\0\1\47\2\6\1\0\1\6\13\0\10\6" +
      "\1\142\31\6\1\0\1\47\2\6\1\0\1\6\66\0" +
      "\1\143\3\0\1\144\57\0\2\37\3\0\1\37\54\0" +
      "\1\145\7\0\51\42\1\0\2\42\1\0\5\42\1\0" +
      "\54\146\3\0\4\146\52\46\1\0\1\46\1\0\5\46" +
      "\1\0\3\6\1\53\36\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\3\6\1\76\3\6\1\147\1\6\1\150" +
      "\30\6\1\0\1\47\2\6\1\0\1\6\13\0\2\6" +
      "\1\151\14\6\1\152\22\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\5\6\1\153\34\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\6\6\1\154\33\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\5\6\1\155\4\6\1\156" +
      "\2\6\1\157\1\160\6\6\1\161\14\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\3\6\1\64\36\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\25\6\1\162\14\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\7\6\1\163" +
      "\10\6\1\164\21\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\14\6\1\165\25\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\16\6\1\166\15\6\1\167\5\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\10\6\1\170\31\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\7\6\1\116" +
      "\32\6\1\0\1\47\2\6\1\0\1\6\13\0\10\6" +
      "\1\171\31\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\10\6\1\172\2\6\1\173\26\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\13\6\1\174\2\6\1\175\1\6" +
      "\1\176\21\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\5\6\1\53\1\6\1\177\32\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\5\6\1\200\5\6\1\174\5\6" +
      "\1\201\20\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\23\6\1\175\1\6\1\202\14\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\1\6\1\203\3\6\1\53\1\6" +
      "\1\204\32\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\12\6\1\205\13\6\1\206\13\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\13\6\1\203\26\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\3\6\1\207\36\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\7\6\1\210\32\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\5\6\1\211" +
      "\22\6\1\116\11\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\40\6\1\116\1\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\3\6\1\212\36\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\12\6\1\116\6\6\1\213\20\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\10\6\1\214" +
      "\31\6\1\0\1\47\2\6\1\0\1\6\13\0\11\6" +
      "\1\215\30\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\10\6\1\216\6\6\1\217\22\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\203\36\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\6\6\1\220\1\221\1\6" +
      "\1\222\1\6\1\116\26\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\10\6\1\223\31\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\13\6\1\224\2\6\1\116\4\6" +
      "\1\116\16\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\6\6\1\225\33\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\13\6\1\226\26\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\3\6\1\227\36\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\17\6\1\230\22\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\20\6\1\53\1\6\1\53" +
      "\17\6\1\0\1\47\2\6\1\0\1\6\13\0\11\6" +
      "\1\53\30\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\10\6\1\65\31\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\2\6\1\127\37\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\4\6\1\231\20\6\1\116\14\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\16\6\1\232\23\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\13\6\1\116" +
      "\26\6\1\0\1\47\2\6\1\0\1\6\13\0\25\6" +
      "\1\233\14\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\14\6\1\234\25\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\25\6\1\235\14\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\13\6\1\236\26\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\5\6\1\237\34\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\5\6\1\240\34\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\4\6\1\241\35\6" +
      "\1\0\1\47\2\6\1\0\1\6\42\0\1\242\1\0" +
      "\2\242\2\0\2\242\1\0\1\242\2\0\1\243\1\0" +
      "\1\242\2\0\1\243\16\0\1\137\22\0\1\140\1\0" +
      "\2\140\2\0\2\140\1\0\1\140\4\0\1\140\1\0" +
      "\1\137\13\0\2\6\1\244\37\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\16\6\1\116\23\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\54\143\3\0\4\143\20\6" +
      "\1\245\21\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\5\6\1\246\34\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\2\6\1\247\37\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\5\6\1\250\34\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\251\14\6\1\201\20\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\7\6\1\171" +
      "\32\6\1\0\1\47\2\6\1\0\1\6\13\0\6\6" +
      "\1\252\33\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\2\6\1\253\37\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\4\6\1\254\35\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\11\6\1\255\30\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\256\35\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\24\6\1\203\15\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\20\6\1\257\21\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\10\6\1\260" +
      "\31\6\1\0\1\47\2\6\1\0\1\6\13\0\2\6" +
      "\1\261\37\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\27\6\1\116\12\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\12\6\1\262\27\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\12\6\1\116\27\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\20\6\1\116\21\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\2\6\1\263\37\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\4\6\1\264\17\6" +
      "\1\265\15\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\4\6\1\103\35\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\4\6\1\247\35\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\17\6\1\266\22\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\53\35\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\2\6\1\53\1\6\1\251" +
      "\35\6\1\0\1\47\2\6\1\0\1\6\13\0\2\6" +
      "\1\267\37\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\27\6\1\116\1\6\1\270\10\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\5\6\1\116\34\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\25\6\1\271\14\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\10\6\1\212\31\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\4\6\1\116" +
      "\35\6\1\0\1\47\2\6\1\0\1\6\13\0\25\6" +
      "\1\272\14\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\6\6\1\127\33\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\14\6\1\273\25\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\5\6\1\53\34\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\13\6\1\274\26\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\14\6\1\206\25\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\10\6\1\203\31\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\1\6\1\203" +
      "\40\6\1\0\1\47\2\6\1\0\1\6\13\0\31\6" +
      "\1\116\6\6\1\275\1\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\7\6\1\276\32\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\5\6\1\277\6\6\1\300\25\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\11\6\1\301" +
      "\30\6\1\0\1\47\2\6\1\0\1\6\13\0\11\6" +
      "\1\116\30\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\10\6\1\302\31\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\7\6\1\177\32\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\24\6\1\116\15\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\13\6\1\303\26\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\7\6\1\166\32\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\3\6\1\304\36\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\4\6\1\154" +
      "\35\6\1\0\1\47\2\6\1\0\1\6\13\0\3\6" +
      "\1\305\36\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\6\6\1\306\33\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\3\6\1\307\36\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\5\6\1\310\34\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\311\35\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\24\6\1\53\15\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\16\6\1\53\23\6" +
      "\1\0\1\47\2\6\1\0\1\6\42\0\1\242\1\0" +
      "\2\242\2\0\2\242\1\0\1\242\4\0\1\242\15\0" +
      "\7\6\1\312\32\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\34\6\1\313\5\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\4\6\1\50\35\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\116\36\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\5\6\1\314\34\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\3\6\1\315\36\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\3\6\1\316" +
      "\36\6\1\0\1\47\2\6\1\0\1\6\13\0\15\6" +
      "\1\317\24\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\3\6\1\320\36\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\17\6\1\321\22\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\30\6\1\322\11\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\2\6\1\323\37\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\17\6\1\324\22\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\20\6\1\325\21\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\17\6\1\326" +
      "\22\6\1\0\1\47\2\6\1\0\1\6\13\0\7\6" +
      "\1\327\32\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\5\6\1\330\34\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\10\6\1\216\31\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\5\6\1\206\34\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\6\6\1\331\33\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\32\6\1\116\7\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\5\6\1\226\34\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\4\6\1\330" +
      "\35\6\1\0\1\47\2\6\1\0\1\6\13\0\24\6" +
      "\1\332\15\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\5\6\1\333\34\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\31\6\1\334\10\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\5\6\1\335\34\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\17\6\1\336\22\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\17\6\1\337\22\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\4\6\1\340\35\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\5\6\1\341" +
      "\34\6\1\0\1\47\2\6\1\0\1\6\13\0\4\6" +
      "\1\342\35\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\17\6\1\343\22\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\4\6\1\344\35\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\12\6\1\345\27\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\332\35\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\10\6\1\346\31\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\34\6\1\347\5\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\34\6\1\350" +
      "\5\6\1\0\1\47\2\6\1\0\1\6\13\0\1\6" +
      "\1\351\7\6\1\352\30\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\4\6\1\65\35\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\13\6\1\353\26\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\7\6\1\53\32\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\4\6\1\354\35\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\13\6\1\206" +
      "\26\6\1\0\1\47\2\6\1\0\1\6\13\0\14\6" +
      "\1\177\25\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\34\6\1\355\5\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\12\6\1\356\27\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\7\6\1\127\32\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\357\35\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\5\6\1\211\34\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\34\6\1\360\5\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\34\6\1\361" +
      "\5\6\1\0\1\47\2\6\1\0\1\6\13\0\7\6" +
      "\1\362\32\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\4\6\1\127\35\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\10\6\1\363\31\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\10\6\1\324\31\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\5\6\1\364\34\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\14\6\1\212\25\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\10\6\1\365\31\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\34\6\1\366" +
      "\5\6\1\0\1\47\2\6\1\0\1\6\13\0\25\6" +
      "\1\206\14\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\25\6\1\367\14\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\4\6\1\370\35\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\7\6\1\340\32\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\1\6\1\371\3\6\1\372\1\6" +
      "\1\373\1\374\1\375\1\376\1\377\1\u0100\2\6\1\u0101" +
      "\1\u0102\1\6\1\u0103\1\6\1\u0104\6\6\1\u0105\6\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\13\6\1\u0106" +
      "\26\6\1\0\1\47\2\6\1\0\1\6\13\0\10\6" +
      "\1\u0107\31\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\17\6\1\76\22\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\4\6\1\u0108\35\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\34\6\1\u0109\5\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\u010a\1\6\1\u010b\5\6" +
      "\1\u010c\26\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\34\6\1\u010d\5\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\34\6\1\u010e\5\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\20\6\1\u010f\21\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\u0110\36\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\20\6\1\53\21\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\5\6\1\u0111\34\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\34\6\1\u0112" +
      "\5\6\1\0\1\47\2\6\1\0\1\6\13\0\2\6" +
      "\1\65\37\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\10\6\1\u0113\31\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\17\6\1\u0114\22\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\7\6\1\203\32\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\2\6\1\u0115\37\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\10\6\1\u0116\31\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\2\6\1\u0117\37\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\13\6\1\u0118" +
      "\26\6\1\0\1\47\2\6\1\0\1\6\13\0\4\6" +
      "\1\u0119\35\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\2\6\1\u011a\5\6\1\u011b\31\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\u011c\1\6\1\u011d\33\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\2\6\1\u011e" +
      "\37\6\1\0\1\47\2\6\1\0\1\6\13\0\20\6" +
      "\1\171\21\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\10\6\1\u011f\6\6\1\u0120\22\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\4\6\1\u0121\35\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\2\6\1\u0122\37\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\6\6\1\u0123\33\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\5\6\1\u0124" +
      "\34\6\1\0\1\47\2\6\1\0\1\6\13\0\3\6" +
      "\1\76\36\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\14\6\1\302\25\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\7\6\1\271\5\6\1\u0125\24\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\4\6\1\u0126\35\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\4\6\1\76\35\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\16\6\1\106" +
      "\23\6\1\0\1\47\2\6\1\0\1\6\13\0\5\6" +
      "\1\u0127\34\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\6\6\1\u0128\33\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\10\6\1\u0129\31\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\4\6\1\u012a\35\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\6\6\1\266\33\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\13\6\1\u012b\26\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\20\6\1\u012c\21\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\5\6\1\177" +
      "\34\6\1\0\1\47\2\6\1\0\1\6\13\0\3\6" +
      "\1\u012d\36\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\12\6\1\u012e\27\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\23\6\1\116\16\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\2\6\1\u012f\37\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\17\6\1\u0130\22\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\7\6\1\271\32\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\7\6\1\u0111\1\6" +
      "\1\u0131\30\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\14\6\1\u0132\25\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\21\6\1\u0133\20\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\12\6\1\u0134\27\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\1\6\1\u0135\40\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\22\6\1\u0136\17\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\17\6\1\247\22\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\6\6\1\247" +
      "\33\6\1\0\1\47\2\6\1\0\1\6\13\0\17\6" +
      "\1\u0137\22\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\3\6\1\u0138\36\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\17\6\1\u0139\22\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\16\6\1\u013a\23\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\2\6\1\u013b\37\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\3\6\1\u013c\36\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\13\6\1\u013d\26\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\14\6\1\u013e" +
      "\25\6\1\0\1\47\2\6\1\0\1\6\13\0\4\6" +
      "\1\u013f\35\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\4\6\1\u0140\35\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\12\6\1\u0141\27\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\4\6\1\u0142\35\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\35\6\1\u0143\4\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\16\6\1\u0144\23\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\11\6\1\u0145\30\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\2\6\1\154" +
      "\37\6\1\0\1\47\2\6\1\0\1\6\13\0\5\6" +
      "\1\u0146\34\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\16\6\1\u0147\23\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\1\6\1\116\40\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\13\6\1\u0148\26\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\u0149\36\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\10\6\1\u014a\31\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\11\6\1\u014b\30\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\11\6\1\u014c" +
      "\30\6\1\0\1\47\2\6\1\0\1\6\13\0\26\6" +
      "\1\314\13\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\10\6\1\u014d\31\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\5\6\1\u014e\34\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\6\6\1\u014f\33\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\16\6\1\u0150\23\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\7\6\1\u0151\32\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\17\6\1\203\22\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\13\6\1\u0152" +
      "\26\6\1\0\1\47\2\6\1\0\1\6\13\0\36\6" +
      "\1\u0153\3\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\34\6\1\u0154\5\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\10\6\1\u0155\31\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\3\6\1\u0156\36\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\17\6\1\u0157\22\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\34\6\1\u0158\5\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\5\6\1\175\34\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\7\6\1\u0159" +
      "\32\6\1\0\1\47\2\6\1\0\1\6\13\0\6\6" +
      "\1\u015a\33\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\17\6\1\214\22\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\34\6\1\u015b\5\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\10\6\1\u015c\31\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\u015d\36\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\17\6\1\u015e\22\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\5\6\1\u015f\34\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\5\6\1\u0160" +
      "\34\6\1\0\1\47\2\6\1\0\1\6\13\0\32\6" +
      "\1\u0161\7\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\22\6\1\u0103\17\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\13\6\1\u0162\26\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\17\6\1\u0163\22\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\3\6\1\206\36\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\10\6\1\u0164\31\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\25\6\1\u0165\14\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\4\6\1\u0166" +
      "\35\6\1\0\1\47\2\6\1\0\1\6\13\0\14\6" +
      "\1\u0167\25\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\7\6\1\u0163\32\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\13\6\1\u0168\26\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\3\6\1\u0169\36\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\10\6\1\u016a\31\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\17\6\1\u016b\22\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\31\6\1\116\10\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\4\6\1\u011c" +
      "\35\6\1\0\1\47\2\6\1\0\1\6\13\0\14\6" +
      "\1\203\25\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\7\6\1\u016c\32\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\10\6\1\u016d\31\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\2\6\1\u016e\37\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\10\6\1\u016f\31\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\17\6\1\u0170\22\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\1\6\1\u0171\40\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\12\6\1\142" +
      "\27\6\1\0\1\47\2\6\1\0\1\6\13\0\34\6" +
      "\1\u0172\5\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\1\6\1\u0173\40\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\12\6\1\u0174\27\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\15\6\1\206\24\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0\5\6\1\151\34\6\1\0\1\47" +
      "\2\6\1\0\1\6\13\0\10\6\1\175\31\6\1\0" +
      "\1\47\2\6\1\0\1\6\13\0\12\6\1\u0175\27\6" +
      "\1\0\1\47\2\6\1\0\1\6\13\0\22\6\1\116" +
      "\17\6\1\0\1\47\2\6\1\0\1\6\13\0\16\6" +
      "\1\u0176\23\6\1\0\1\47\2\6\1\0\1\6\13\0" +
      "\2\6\1\u011a\37\6\1\0\1\47\2\6\1\0\1\6" +
      "\13\0\2\6\1\u0177\37\6\1\0\1\47\2\6\1\0" +
      "\1\6\13\0\7\6\1\345\32\6\1\0\1\47\2\6" +
      "\1\0\1\6\13\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[18309];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
      "Unkown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\10\3\0\25\1\3\11\1\0\1\1\1\11" +
      "\2\1\2\11\1\0\1\1\1\0\67\1\1\0\4\1" +
      "\3\11\74\1\1\0\324\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[375];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Segment s;
  private int offsetShift;
  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  public AqlTokenMaker() {
  }

  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;

    // Start off in the proper state.
    int state = Token.NULL;
    switch (initialTokenType) {
      case Token.COMMENT_MULTILINE:
        state = COMMENT;
        break;
      default:
        state = Token.NULL;
    }

    s = text;
    try {
      yyreset(zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return new TokenImpl();
    }
  }

  private void addToken(int tokenType) {
    addToken(zzStartRead, zzMarkedPos - 1, tokenType);
  }

  private void addToken(int start, int end, int tokenType) {
    int so = start + offsetShift;
    addToken(zzBuffer, start, end, tokenType, so);
  }

  public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
    super.addToken(array, start, end, tokenType, startOffset);
    zzStartRead = zzMarkedPos;
  }

  /**
   * Refills the input buffer.
   * 
   * @return <code>true</code> if EOF was reached, otherwise
   *         <code>false</code>.
   */
  private boolean zzRefill() {
    return zzCurrentPos >= s.offset + s.count;
  }

  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   * 
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   * 
   * @param reader the new input stream
   */
  public final void yyreset(Reader reader) {
    // 's' has been updated.
    zzBuffer = s.array;
    /*
     * We replaced the line below with the two below it because zzRefill
     * no longer "refills" the buffer (since the way we do it, it's always
     * "full" the first time through, since it points to the segment's
     * array). So, we assign zzEndRead here.
     */
    // zzStartRead = zzEndRead = s.offset;
    zzStartRead = s.offset;
    zzEndRead = zzStartRead + s.count - 1;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
    zzLexicalState = YYINITIAL;
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
  }

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param in the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0; /* index in packed string */
    int j = 0; /* index in unpacked array */
    while (i < 1886) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do
        map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: {
          addToken(Token.IDENTIFIER);
        }
        case 16:
          break;
        case 2: {
          addToken(Token.LITERAL_NUMBER_FLOAT);
        }
        case 17:
          break;
        case 3: {
          addToken(Token.SEPARATOR);
        }
        case 18:
          break;
        case 4: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          yybegin(DOUBLE_QUOTED_STRING);
        }
        case 19:
          break;
        case 5: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          yybegin(SINGLE_QUOTED_STRING);
        }
        case 20:
          break;
        case 6: {
          addToken(Token.WHITESPACE);
        }
        case 21:
          break;
        case 7: {
        }
        case 22:
          break;
        case 8: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
        }
        case 23:
          break;
        case 9: {
          yybegin(YYINITIAL);
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
        }
        case 24:
          break;
        case 10: {
          addToken(Token.ERROR_STRING_DOUBLE);
          yybegin(YYINITIAL);
        }
        case 25:
          break;
        case 11: {
          addToken(Token.RESERVED_WORD);
        }
        case 26:
          break;
        case 12: {
          addToken(Token.FUNCTION);
        }
        case 27:
          break;
        case 13: {
          addToken(Token.COMMENT_EOL);
        }
        case 28:
          break;
        case 14: {
          yybegin(COMMENT);
        }
        case 29:
          break;
        case 15: {
          yybegin(YYINITIAL);
          addToken(zzStartRead, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
        }
        case 30:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
              case DOUBLE_QUOTED_STRING: {
                addToken(Token.ERROR_STRING_DOUBLE);
                yybegin(YYINITIAL);
              }
              case 376:
                break;
              case SINGLE_QUOTED_STRING: {
                addToken(Token.ERROR_STRING_DOUBLE);
                yybegin(YYINITIAL);
              }
              case 377:
                break;
              default: {
                addNullToken();
                return firstToken;
              }
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

}
