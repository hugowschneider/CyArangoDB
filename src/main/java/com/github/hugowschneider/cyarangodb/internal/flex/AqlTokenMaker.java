/* The following code was generated by JFlex 1.5.1 */

package com.github.hugowschneider.cyarangodb.internal.flex;

import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>./src/main/jflex/AqlTokenMaker.flex</tt>
 */
public class AqlTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int DOUBLE_QUOTED_STRING = 6;
  public static final int SINGLE_QUOTED_STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0, 1, 1, 2, 2, 3, 3, 4, 4
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\42\1\60\1\53\1\55\1\55\1\54\22\42\1\60\1\42\1\50" +
      "\4\42\1\51\2\57\1\56\1\47\1\57\1\43\1\46\1\52\1\32" +
      "\1\31\1\27\2\45\1\40\1\36\1\45\1\35\1\45\1\42\1\57" +
      "\1\42\1\57\3\42\1\17\1\21\1\14\1\20\1\4\1\1\1\25" +
      "\1\24\1\10\1\37\1\26\1\11\1\12\1\7\1\2\1\16\1\33" +
      "\1\3\1\13\1\5\1\6\1\15\1\23\1\30\1\22\1\41\1\57" +
      "\1\61\1\57\1\42\1\34\1\42\1\17\1\21\1\14\1\20\1\4" +
      "\1\1\1\25\1\24\1\10\1\37\1\26\1\11\1\12\1\7\1\2" +
      "\1\16\1\33\1\3\1\13\1\5\1\6\1\15\1\23\1\30\1\22" +
      "\1\41\1\57\1\42\1\57\7\42\1\55\44\42\1\0\12\42\1\0" +
      "\4\42\1\0\5\42\27\0\1\42\37\0\1\42\70\0\2\10\115\0" +
      "\1\13\u0142\0\4\42\14\0\16\42\5\0\7\42\1\0\1\42\1\0" +
      "\21\42\165\0\1\42\2\0\2\42\4\0\10\42\1\0\1\42\3\0" +
      "\1\42\1\0\1\42\24\0\1\42\123\0\1\42\213\0\1\42\245\0" +
      "\11\42\46\0\2\42\1\0\7\42\47\0\11\42\55\0\1\42\1\0" +
      "\1\42\2\0\1\42\2\0\1\42\1\0\10\42\33\0\5\42\3\0" +
      "\35\42\13\0\5\42\100\0\12\44\4\42\146\0\1\42\10\0\2\42" +
      "\12\0\1\42\6\0\12\44\3\0\2\42\1\0\20\42\73\0\2\42" +
      "\145\0\16\42\12\44\54\0\4\42\1\0\5\42\56\0\22\42\34\0" +
      "\104\42\1\0\1\42\13\0\67\42\33\0\1\42\144\0\2\42\12\44" +
      "\1\42\7\0\1\42\7\0\1\42\3\0\1\42\10\0\2\42\2\0" +
      "\2\42\26\0\1\42\7\0\1\42\1\0\3\42\4\0\2\42\11\0" +
      "\2\42\2\0\2\42\4\0\10\42\1\0\4\42\2\0\1\42\5\0" +
      "\2\42\12\44\2\0\17\42\3\0\1\42\6\0\4\42\2\0\2\42" +
      "\26\0\1\42\7\0\1\42\2\0\1\42\2\0\1\42\2\0\2\42" +
      "\1\0\1\42\5\0\4\42\2\0\2\42\3\0\3\42\1\0\7\42" +
      "\4\0\1\42\1\0\7\42\12\44\6\0\13\42\3\0\1\42\11\0" +
      "\1\42\3\0\1\42\26\0\1\42\7\0\1\42\2\0\1\42\5\0" +
      "\2\42\12\0\1\42\3\0\1\42\3\0\2\42\1\0\17\42\4\0" +
      "\2\42\12\44\21\42\3\0\1\42\10\0\2\42\2\0\2\42\26\0" +
      "\1\42\7\0\1\42\2\0\1\42\5\0\2\42\11\0\2\42\2\0" +
      "\2\42\3\0\10\42\2\0\4\42\2\0\1\42\5\0\2\42\12\44" +
      "\1\42\1\0\20\42\2\0\1\42\6\0\3\42\3\0\1\42\4\0" +
      "\3\42\2\0\1\42\1\0\1\42\2\0\3\42\2\0\3\42\3\0" +
      "\3\42\14\0\4\42\5\0\3\42\3\0\1\42\4\0\2\42\1\0" +
      "\6\42\1\0\16\42\12\44\21\42\3\0\1\42\10\0\1\42\3\0" +
      "\1\42\27\0\1\42\12\0\1\42\5\0\3\42\10\0\1\42\3\0" +
      "\1\42\4\0\7\42\2\0\1\42\2\0\6\42\4\0\2\42\12\44" +
      "\22\42\2\0\1\42\10\0\1\42\3\0\1\42\27\0\1\42\12\0" +
      "\1\42\5\0\2\42\11\0\1\42\3\0\1\42\4\0\7\42\2\0" +
      "\7\42\1\0\1\42\4\0\2\42\12\44\1\42\2\0\17\42\2\0" +
      "\1\42\10\0\1\42\3\0\1\42\51\0\2\42\10\0\1\42\3\0" +
      "\1\42\5\0\10\42\1\0\10\42\4\0\2\42\12\44\12\42\6\0" +
      "\2\42\2\0\1\42\22\0\3\42\30\0\1\42\11\0\1\42\1\0" +
      "\2\42\7\0\3\42\1\0\4\42\6\0\1\42\1\0\1\42\10\0" +
      "\22\42\2\0\15\42\72\0\5\42\17\0\1\42\12\44\47\42\2\0" +
      "\1\42\1\0\2\42\2\0\1\42\1\0\2\42\1\0\6\42\4\0" +
      "\1\42\7\0\1\42\3\0\1\42\1\0\1\42\1\0\2\42\2\0" +
      "\1\42\15\0\1\42\3\0\2\42\5\0\1\42\1\0\1\42\6\0" +
      "\2\42\12\44\2\42\4\0\40\42\1\0\27\42\2\0\6\42\12\44" +
      "\13\42\1\0\1\42\1\0\1\42\1\0\4\42\12\0\1\42\44\0" +
      "\4\42\24\0\1\42\22\0\1\42\44\0\11\42\1\0\71\42\100\0" +
      "\12\44\6\42\100\0\12\44\4\0\2\42\46\0\1\42\1\0\5\42" +
      "\1\0\2\42\53\0\1\42\u014d\0\1\42\4\0\2\42\7\0\1\42" +
      "\1\0\1\42\4\0\2\42\51\0\1\42\4\0\2\42\41\0\1\42" +
      "\4\0\2\42\7\0\1\42\1\0\1\42\4\0\2\42\17\0\1\42" +
      "\71\0\1\42\4\0\2\42\103\0\2\42\3\0\40\42\20\0\20\42" +
      "\125\0\14\42\u026c\0\2\42\21\0\1\42\32\0\5\42\113\0\3\42" +
      "\3\0\17\42\15\0\1\42\7\0\13\42\25\0\13\42\24\0\14\42" +
      "\15\0\1\42\3\0\1\42\2\0\14\42\124\0\3\42\1\0\4\42" +
      "\2\0\2\42\12\44\41\42\3\0\2\42\12\44\6\42\130\0\10\42" +
      "\53\0\5\42\106\0\12\42\35\0\3\42\14\0\4\42\14\0\12\42" +
      "\12\44\36\0\2\42\5\0\13\42\54\0\4\42\32\0\6\42\12\44" +
      "\46\42\34\0\4\42\77\0\1\42\35\0\2\42\1\0\12\44\6\42" +
      "\12\44\15\42\1\0\130\42\114\0\4\42\12\44\21\42\11\0\14\42" +
      "\60\0\12\44\72\0\14\42\70\0\10\42\12\44\3\42\3\0\12\44" +
      "\44\0\122\42\3\0\1\42\43\0\11\42\347\0\25\42\u011a\0\2\42" +
      "\6\0\2\42\46\0\2\42\6\0\2\42\10\0\1\42\1\0\1\42" +
      "\1\0\1\42\1\0\1\42\37\0\2\42\65\0\1\42\7\0\1\42" +
      "\1\0\3\42\3\0\1\42\7\0\3\42\4\0\2\42\6\0\4\42" +
      "\15\0\5\42\3\0\1\42\7\0\53\42\1\55\1\55\25\42\2\0" +
      "\23\42\1\0\34\42\1\0\15\42\1\0\20\42\15\0\63\42\41\0" +
      "\21\42\1\0\4\42\1\0\2\42\12\0\1\42\1\0\3\42\5\0" +
      "\6\42\1\0\1\42\1\0\1\42\1\0\1\42\1\26\3\0\1\42" +
      "\13\0\2\42\4\0\5\42\5\0\4\42\1\0\21\42\51\0\u032d\42" +
      "\64\0\u0716\42\57\0\1\42\57\0\1\42\205\0\6\42\11\0\14\42" +
      "\46\0\1\42\1\0\5\42\1\0\2\42\70\0\7\42\1\0\17\42" +
      "\30\0\11\42\7\0\1\42\7\0\1\42\7\0\1\42\7\0\1\42" +
      "\7\0\1\42\7\0\1\42\7\0\1\42\7\0\1\42\40\0\57\42" +
      "\1\0\u01d5\42\3\0\31\42\17\0\1\42\5\0\2\42\5\0\4\42" +
      "\126\0\2\42\2\0\2\42\3\0\1\42\132\0\1\42\4\0\5\42" +
      "\51\0\3\42\136\0\21\42\33\0\65\42\20\0\u0200\42\u19b6\0\112\42" +
      "\u51cd\0\63\42\u048d\0\103\42\56\0\2\42\u010d\0\3\42\20\0\12\44" +
      "\2\0\24\42\63\0\1\42\12\0\1\42\31\0\7\42\123\0\45\42" +
      "\11\0\2\42\147\0\2\42\4\0\1\42\4\0\14\42\13\0\115\42" +
      "\60\0\30\42\64\0\14\42\105\0\13\42\12\44\6\42\30\0\3\42" +
      "\1\0\4\42\12\44\44\0\2\42\44\0\14\42\35\0\3\42\101\0" +
      "\16\42\1\0\12\44\46\42\67\0\11\42\16\0\2\42\12\44\6\42" +
      "\27\0\3\42\2\0\4\42\103\0\30\42\3\0\2\42\20\0\2\42" +
      "\5\0\12\42\6\0\2\42\6\0\2\42\6\0\11\42\7\0\1\42" +
      "\7\0\221\42\53\0\1\42\2\0\2\42\12\44\6\42\u2ba4\0\14\42" +
      "\27\0\4\42\61\0\u2104\42\u016e\0\2\42\152\0\46\42\7\0\14\42" +
      "\5\0\5\42\14\0\1\42\15\0\1\42\5\0\1\42\1\0\1\42" +
      "\2\0\1\42\2\0\1\42\154\0\41\42\u016b\0\22\42\100\0\2\42" +
      "\66\0\50\42\14\0\4\42\20\0\20\42\7\0\14\42\2\0\30\42" +
      "\3\0\40\42\5\0\1\42\207\0\23\42\12\44\7\42\32\0\4\42" +
      "\1\0\1\42\32\0\13\42\131\0\3\42\6\0\2\42\6\0\2\42" +
      "\6\0\2\42\3\0\43\42";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\5\0\22\1\1\2\2\1\1\3\1\4\1\5\1\6" +
      "\1\3\1\7\2\10\1\11\1\12\1\13\1\0\1\11" +
      "\1\0\3\1\1\14\16\1\1\14\23\1\1\15\20\1" +
      "\1\0\1\2\2\1\1\16\1\17\1\20\1\11\17\1" +
      "\1\15\13\1\1\15\5\1\1\15\31\1\1\2\1\0" +
      "\13\1\1\15\47\1\2\15\4\1\1\14\16\1\1\14" +
      "\7\1\1\15\101\1\1\15\57\1\1\15\21\1";

  private static int[] zzUnpackAction() {
    int[] result = new int[376];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e" +
      "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee" +
      "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e" +
      "\0\u04b0\0\u04e2\0\62\0\62\0\62\0\62\0\u0514\0\u0546" +
      "\0\62\0\u0578\0\u05aa\0\62\0\62\0\u05dc\0\u060e\0\372" +
      "\0\u0640\0\u0672\0\u06a4\0\372\0\u06d6\0\u0708\0\u073a\0\u076c" +
      "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc" +
      "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c" +
      "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c" +
      "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\372\0\u0d7a" +
      "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a" +
      "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a" +
      "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\62\0\62\0\62\0\u1194" +
      "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324" +
      "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4" +
      "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644" +
      "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4" +
      "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964" +
      "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4" +
      "\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84" +
      "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2" +
      "\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72" +
      "\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102" +
      "\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292" +
      "\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422" +
      "\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2" +
      "\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742" +
      "\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u1482\0\u2742\0\u283c\0\u286e" +
      "\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe" +
      "\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e" +
      "\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e" +
      "\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae" +
      "\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e" +
      "\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce" +
      "\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e" +
      "\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee" +
      "\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e" +
      "\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc\0\u380e" +
      "\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e" +
      "\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e" +
      "\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe" +
      "\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e" +
      "\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde" +
      "\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e" +
      "\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u0f0a\0\u42cc" +
      "\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c" +
      "\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[376];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
      "\1\16\1\17\1\20\1\21\1\22\1\6\1\23\1\24" +
      "\1\25\2\6\1\26\2\6\1\27\1\30\1\6\2\30" +
      "\2\6\2\30\1\31\1\30\1\32\3\33\1\30\1\34" +
      "\1\33\1\35\1\36\1\37\2\40\1\0\1\33\1\34" +
      "\1\40\1\33\62\0\54\41\2\0\1\42\3\41\50\43" +
      "\1\44\2\43\1\45\5\43\1\46\51\47\1\44\1\47" +
      "\1\45\5\47\1\46\42\6\1\0\1\50\2\6\14\0" +
      "\2\6\1\51\5\6\1\52\1\53\30\6\1\0\1\50" +
      "\2\6\14\0\3\6\1\54\2\6\1\55\33\6\1\0" +
      "\1\50\2\6\14\0\2\6\1\56\1\6\1\57\1\60" +
      "\2\6\1\61\6\6\1\62\22\6\1\0\1\50\2\6" +
      "\14\0\7\6\1\63\20\6\1\64\11\6\1\0\1\50" +
      "\2\6\14\0\3\6\1\65\13\6\1\66\22\6\1\0" +
      "\1\50\2\6\14\0\6\6\1\67\1\70\6\6\1\71" +
      "\23\6\1\0\1\50\2\6\14\0\2\6\1\72\37\6" +
      "\1\0\1\50\2\6\14\0\7\6\1\73\32\6\1\0" +
      "\1\50\2\6\14\0\2\6\1\74\1\6\1\75\1\60" +
      "\2\6\1\76\6\6\1\77\22\6\1\0\1\50\2\6" +
      "\14\0\4\6\1\100\3\6\1\101\6\6\1\102\1\103" +
      "\21\6\1\0\1\50\2\6\14\0\2\6\1\104\3\6" +
      "\1\105\1\6\1\66\1\106\4\6\1\107\5\6\1\110" +
      "\6\6\1\111\6\6\1\0\1\50\2\6\14\0\2\6" +
      "\1\112\1\6\1\113\35\6\1\0\1\50\2\6\14\0" +
      "\2\6\1\114\1\115\2\6\1\116\1\6\1\117\6\6" +
      "\1\120\22\6\1\0\1\50\2\6\14\0\5\6\1\121" +
      "\1\6\1\122\1\6\1\123\1\6\1\124\1\125\1\126" +
      "\1\127\2\6\1\130\3\6\1\131\14\6\1\0\1\50" +
      "\2\6\14\0\2\6\1\132\1\6\1\133\3\6\1\134" +
      "\6\6\1\135\22\6\1\0\1\50\2\6\14\0\10\6" +
      "\1\136\31\6\1\0\1\50\2\6\14\0\4\6\1\137" +
      "\35\6\1\0\1\50\2\6\20\0\1\140\22\0\1\30" +
      "\1\0\2\30\2\0\2\30\1\0\1\30\4\0\1\30" +
      "\1\141\13\0\13\6\1\142\26\6\1\0\1\50\2\6" +
      "\14\0\10\6\1\143\31\6\1\0\1\50\2\6\66\0" +
      "\1\144\3\0\1\145\56\0\2\40\3\0\1\40\53\0" +
      "\1\146\7\0\50\43\1\0\2\43\1\0\5\43\1\0" +
      "\53\147\3\0\4\147\51\47\1\0\1\47\1\0\5\47" +
      "\1\0\3\6\1\54\36\6\1\0\1\50\2\6\14\0" +
      "\3\6\1\77\3\6\1\150\1\6\1\151\30\6\1\0" +
      "\1\50\2\6\14\0\2\6\1\152\14\6\1\153\22\6" +
      "\1\0\1\50\2\6\14\0\5\6\1\154\34\6\1\0" +
      "\1\50\2\6\14\0\6\6\1\155\33\6\1\0\1\50" +
      "\2\6\14\0\5\6\1\156\4\6\1\157\2\6\1\160" +
      "\1\161\6\6\1\162\14\6\1\0\1\50\2\6\14\0" +
      "\3\6\1\65\36\6\1\0\1\50\2\6\14\0\25\6" +
      "\1\163\14\6\1\0\1\50\2\6\14\0\7\6\1\164" +
      "\10\6\1\165\21\6\1\0\1\50\2\6\14\0\14\6" +
      "\1\166\25\6\1\0\1\50\2\6\14\0\16\6\1\167" +
      "\15\6\1\170\5\6\1\0\1\50\2\6\14\0\10\6" +
      "\1\171\31\6\1\0\1\50\2\6\14\0\7\6\1\117" +
      "\32\6\1\0\1\50\2\6\14\0\10\6\1\172\31\6" +
      "\1\0\1\50\2\6\14\0\10\6\1\173\2\6\1\174" +
      "\26\6\1\0\1\50\2\6\14\0\13\6\1\175\2\6" +
      "\1\176\1\6\1\177\21\6\1\0\1\50\2\6\14\0" +
      "\5\6\1\54\1\6\1\200\32\6\1\0\1\50\2\6" +
      "\14\0\5\6\1\201\5\6\1\175\5\6\1\202\20\6" +
      "\1\0\1\50\2\6\14\0\23\6\1\176\1\6\1\203" +
      "\14\6\1\0\1\50\2\6\14\0\1\6\1\204\3\6" +
      "\1\54\1\6\1\205\32\6\1\0\1\50\2\6\14\0" +
      "\12\6\1\206\13\6\1\207\13\6\1\0\1\50\2\6" +
      "\14\0\13\6\1\204\26\6\1\0\1\50\2\6\14\0" +
      "\3\6\1\210\36\6\1\0\1\50\2\6\14\0\7\6" +
      "\1\211\32\6\1\0\1\50\2\6\14\0\5\6\1\212" +
      "\22\6\1\117\11\6\1\0\1\50\2\6\14\0\40\6" +
      "\1\117\1\6\1\0\1\50\2\6\14\0\3\6\1\213" +
      "\36\6\1\0\1\50\2\6\14\0\12\6\1\117\6\6" +
      "\1\214\20\6\1\0\1\50\2\6\14\0\10\6\1\215" +
      "\31\6\1\0\1\50\2\6\14\0\11\6\1\216\30\6" +
      "\1\0\1\50\2\6\14\0\10\6\1\217\6\6\1\220" +
      "\22\6\1\0\1\50\2\6\14\0\3\6\1\204\36\6" +
      "\1\0\1\50\2\6\14\0\6\6\1\221\1\222\1\6" +
      "\1\223\1\6\1\117\26\6\1\0\1\50\2\6\14\0" +
      "\10\6\1\224\31\6\1\0\1\50\2\6\14\0\13\6" +
      "\1\225\2\6\1\117\4\6\1\117\16\6\1\0\1\50" +
      "\2\6\14\0\6\6\1\226\33\6\1\0\1\50\2\6" +
      "\14\0\13\6\1\227\26\6\1\0\1\50\2\6\14\0" +
      "\3\6\1\230\36\6\1\0\1\50\2\6\14\0\17\6" +
      "\1\231\22\6\1\0\1\50\2\6\14\0\20\6\1\54" +
      "\1\6\1\54\17\6\1\0\1\50\2\6\14\0\11\6" +
      "\1\54\30\6\1\0\1\50\2\6\14\0\10\6\1\66" +
      "\31\6\1\0\1\50\2\6\14\0\2\6\1\130\37\6" +
      "\1\0\1\50\2\6\14\0\4\6\1\232\20\6\1\117" +
      "\14\6\1\0\1\50\2\6\14\0\16\6\1\233\23\6" +
      "\1\0\1\50\2\6\14\0\13\6\1\117\26\6\1\0" +
      "\1\50\2\6\14\0\25\6\1\234\14\6\1\0\1\50" +
      "\2\6\14\0\14\6\1\235\25\6\1\0\1\50\2\6" +
      "\14\0\25\6\1\236\14\6\1\0\1\50\2\6\14\0" +
      "\13\6\1\237\26\6\1\0\1\50\2\6\14\0\5\6" +
      "\1\240\34\6\1\0\1\50\2\6\14\0\5\6\1\241" +
      "\34\6\1\0\1\50\2\6\14\0\4\6\1\242\35\6" +
      "\1\0\1\50\2\6\43\0\1\243\1\0\2\243\2\0" +
      "\2\243\1\0\1\243\2\0\1\244\1\0\1\243\1\0" +
      "\1\244\16\0\1\140\22\0\1\141\1\0\2\141\2\0" +
      "\2\141\1\0\1\141\4\0\1\141\14\0\2\6\1\245" +
      "\37\6\1\0\1\50\2\6\14\0\16\6\1\117\23\6" +
      "\1\0\1\50\2\6\14\0\53\144\3\0\4\144\20\6" +
      "\1\246\21\6\1\0\1\50\2\6\14\0\5\6\1\247" +
      "\34\6\1\0\1\50\2\6\14\0\2\6\1\250\37\6" +
      "\1\0\1\50\2\6\14\0\5\6\1\251\34\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\252\14\6\1\202\20\6" +
      "\1\0\1\50\2\6\14\0\7\6\1\172\32\6\1\0" +
      "\1\50\2\6\14\0\6\6\1\253\33\6\1\0\1\50" +
      "\2\6\14\0\2\6\1\254\37\6\1\0\1\50\2\6" +
      "\14\0\4\6\1\255\35\6\1\0\1\50\2\6\14\0" +
      "\11\6\1\256\30\6\1\0\1\50\2\6\14\0\4\6" +
      "\1\257\35\6\1\0\1\50\2\6\14\0\24\6\1\204" +
      "\15\6\1\0\1\50\2\6\14\0\20\6\1\260\21\6" +
      "\1\0\1\50\2\6\14\0\10\6\1\261\31\6\1\0" +
      "\1\50\2\6\14\0\2\6\1\262\37\6\1\0\1\50" +
      "\2\6\14\0\27\6\1\117\12\6\1\0\1\50\2\6" +
      "\14\0\12\6\1\263\27\6\1\0\1\50\2\6\14\0" +
      "\12\6\1\117\27\6\1\0\1\50\2\6\14\0\20\6" +
      "\1\117\21\6\1\0\1\50\2\6\14\0\2\6\1\264" +
      "\37\6\1\0\1\50\2\6\14\0\4\6\1\265\17\6" +
      "\1\266\15\6\1\0\1\50\2\6\14\0\4\6\1\104" +
      "\35\6\1\0\1\50\2\6\14\0\4\6\1\250\35\6" +
      "\1\0\1\50\2\6\14\0\17\6\1\267\22\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\54\35\6\1\0\1\50" +
      "\2\6\14\0\2\6\1\54\1\6\1\252\35\6\1\0" +
      "\1\50\2\6\14\0\2\6\1\270\37\6\1\0\1\50" +
      "\2\6\14\0\27\6\1\117\1\6\1\271\10\6\1\0" +
      "\1\50\2\6\14\0\5\6\1\117\34\6\1\0\1\50" +
      "\2\6\14\0\25\6\1\272\14\6\1\0\1\50\2\6" +
      "\14\0\10\6\1\213\31\6\1\0\1\50\2\6\14\0" +
      "\4\6\1\117\35\6\1\0\1\50\2\6\14\0\25\6" +
      "\1\273\14\6\1\0\1\50\2\6\14\0\6\6\1\130" +
      "\33\6\1\0\1\50\2\6\14\0\14\6\1\274\25\6" +
      "\1\0\1\50\2\6\14\0\5\6\1\54\34\6\1\0" +
      "\1\50\2\6\14\0\13\6\1\275\26\6\1\0\1\50" +
      "\2\6\14\0\14\6\1\207\25\6\1\0\1\50\2\6" +
      "\14\0\10\6\1\204\31\6\1\0\1\50\2\6\14\0" +
      "\1\6\1\204\40\6\1\0\1\50\2\6\14\0\31\6" +
      "\1\117\6\6\1\276\1\6\1\0\1\50\2\6\14\0" +
      "\7\6\1\277\32\6\1\0\1\50\2\6\14\0\5\6" +
      "\1\300\6\6\1\301\25\6\1\0\1\50\2\6\14\0" +
      "\11\6\1\302\30\6\1\0\1\50\2\6\14\0\11\6" +
      "\1\117\30\6\1\0\1\50\2\6\14\0\10\6\1\303" +
      "\31\6\1\0\1\50\2\6\14\0\7\6\1\200\32\6" +
      "\1\0\1\50\2\6\14\0\24\6\1\117\15\6\1\0" +
      "\1\50\2\6\14\0\13\6\1\304\26\6\1\0\1\50" +
      "\2\6\14\0\7\6\1\167\32\6\1\0\1\50\2\6" +
      "\14\0\3\6\1\305\36\6\1\0\1\50\2\6\14\0" +
      "\4\6\1\155\35\6\1\0\1\50\2\6\14\0\3\6" +
      "\1\306\36\6\1\0\1\50\2\6\14\0\6\6\1\307" +
      "\33\6\1\0\1\50\2\6\14\0\3\6\1\310\36\6" +
      "\1\0\1\50\2\6\14\0\5\6\1\311\34\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\312\35\6\1\0\1\50" +
      "\2\6\14\0\24\6\1\54\15\6\1\0\1\50\2\6" +
      "\14\0\16\6\1\54\23\6\1\0\1\50\2\6\43\0" +
      "\1\243\1\0\2\243\2\0\2\243\1\0\1\243\4\0" +
      "\1\243\14\0\7\6\1\313\32\6\1\0\1\50\2\6" +
      "\14\0\34\6\1\314\5\6\1\0\1\50\2\6\14\0" +
      "\4\6\1\51\35\6\1\0\1\50\2\6\14\0\3\6" +
      "\1\117\36\6\1\0\1\50\2\6\14\0\5\6\1\315" +
      "\34\6\1\0\1\50\2\6\14\0\3\6\1\316\36\6" +
      "\1\0\1\50\2\6\14\0\3\6\1\317\36\6\1\0" +
      "\1\50\2\6\14\0\15\6\1\320\24\6\1\0\1\50" +
      "\2\6\14\0\3\6\1\321\36\6\1\0\1\50\2\6" +
      "\14\0\17\6\1\322\22\6\1\0\1\50\2\6\14\0" +
      "\30\6\1\323\11\6\1\0\1\50\2\6\14\0\2\6" +
      "\1\324\37\6\1\0\1\50\2\6\14\0\17\6\1\325" +
      "\22\6\1\0\1\50\2\6\14\0\20\6\1\326\21\6" +
      "\1\0\1\50\2\6\14\0\17\6\1\327\22\6\1\0" +
      "\1\50\2\6\14\0\7\6\1\330\32\6\1\0\1\50" +
      "\2\6\14\0\5\6\1\331\34\6\1\0\1\50\2\6" +
      "\14\0\10\6\1\217\31\6\1\0\1\50\2\6\14\0" +
      "\5\6\1\207\34\6\1\0\1\50\2\6\14\0\6\6" +
      "\1\332\33\6\1\0\1\50\2\6\14\0\32\6\1\117" +
      "\7\6\1\0\1\50\2\6\14\0\5\6\1\227\34\6" +
      "\1\0\1\50\2\6\14\0\4\6\1\331\35\6\1\0" +
      "\1\50\2\6\14\0\24\6\1\333\15\6\1\0\1\50" +
      "\2\6\14\0\5\6\1\334\34\6\1\0\1\50\2\6" +
      "\14\0\31\6\1\335\10\6\1\0\1\50\2\6\14\0" +
      "\5\6\1\336\34\6\1\0\1\50\2\6\14\0\17\6" +
      "\1\337\22\6\1\0\1\50\2\6\14\0\17\6\1\340" +
      "\22\6\1\0\1\50\2\6\14\0\4\6\1\341\35\6" +
      "\1\0\1\50\2\6\14\0\5\6\1\342\34\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\343\35\6\1\0\1\50" +
      "\2\6\14\0\17\6\1\344\22\6\1\0\1\50\2\6" +
      "\14\0\4\6\1\345\35\6\1\0\1\50\2\6\14\0" +
      "\12\6\1\346\27\6\1\0\1\50\2\6\14\0\4\6" +
      "\1\333\35\6\1\0\1\50\2\6\14\0\10\6\1\347" +
      "\31\6\1\0\1\50\2\6\14\0\34\6\1\350\5\6" +
      "\1\0\1\50\2\6\14\0\34\6\1\351\5\6\1\0" +
      "\1\50\2\6\14\0\1\6\1\352\7\6\1\353\30\6" +
      "\1\0\1\50\2\6\14\0\4\6\1\66\35\6\1\0" +
      "\1\50\2\6\14\0\13\6\1\354\26\6\1\0\1\50" +
      "\2\6\14\0\7\6\1\54\32\6\1\0\1\50\2\6" +
      "\14\0\4\6\1\355\35\6\1\0\1\50\2\6\14\0" +
      "\13\6\1\207\26\6\1\0\1\50\2\6\14\0\14\6" +
      "\1\200\25\6\1\0\1\50\2\6\14\0\34\6\1\356" +
      "\5\6\1\0\1\50\2\6\14\0\12\6\1\357\27\6" +
      "\1\0\1\50\2\6\14\0\7\6\1\130\32\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\360\35\6\1\0\1\50" +
      "\2\6\14\0\5\6\1\212\34\6\1\0\1\50\2\6" +
      "\14\0\34\6\1\361\5\6\1\0\1\50\2\6\14\0" +
      "\34\6\1\362\5\6\1\0\1\50\2\6\14\0\7\6" +
      "\1\363\32\6\1\0\1\50\2\6\14\0\4\6\1\130" +
      "\35\6\1\0\1\50\2\6\14\0\10\6\1\364\31\6" +
      "\1\0\1\50\2\6\14\0\10\6\1\325\31\6\1\0" +
      "\1\50\2\6\14\0\5\6\1\365\34\6\1\0\1\50" +
      "\2\6\14\0\14\6\1\213\25\6\1\0\1\50\2\6" +
      "\14\0\10\6\1\366\31\6\1\0\1\50\2\6\14\0" +
      "\34\6\1\367\5\6\1\0\1\50\2\6\14\0\25\6" +
      "\1\207\14\6\1\0\1\50\2\6\14\0\25\6\1\370" +
      "\14\6\1\0\1\50\2\6\14\0\4\6\1\371\35\6" +
      "\1\0\1\50\2\6\14\0\7\6\1\341\32\6\1\0" +
      "\1\50\2\6\14\0\1\6\1\372\3\6\1\373\1\6" +
      "\1\374\1\375\1\376\1\377\1\u0100\1\u0101\2\6\1\u0102" +
      "\1\u0103\1\6\1\u0104\1\6\1\u0105\6\6\1\u0106\6\6" +
      "\1\0\1\50\2\6\14\0\13\6\1\u0107\26\6\1\0" +
      "\1\50\2\6\14\0\10\6\1\u0108\31\6\1\0\1\50" +
      "\2\6\14\0\17\6\1\77\22\6\1\0\1\50\2\6" +
      "\14\0\4\6\1\u0109\35\6\1\0\1\50\2\6\14\0" +
      "\34\6\1\u010a\5\6\1\0\1\50\2\6\14\0\3\6" +
      "\1\u010b\1\6\1\u010c\5\6\1\u010d\26\6\1\0\1\50" +
      "\2\6\14\0\34\6\1\u010e\5\6\1\0\1\50\2\6" +
      "\14\0\34\6\1\u010f\5\6\1\0\1\50\2\6\14\0" +
      "\20\6\1\u0110\21\6\1\0\1\50\2\6\14\0\3\6" +
      "\1\u0111\36\6\1\0\1\50\2\6\14\0\20\6\1\54" +
      "\21\6\1\0\1\50\2\6\14\0\5\6\1\u0112\34\6" +
      "\1\0\1\50\2\6\14\0\34\6\1\u0113\5\6\1\0" +
      "\1\50\2\6\14\0\2\6\1\66\37\6\1\0\1\50" +
      "\2\6\14\0\10\6\1\u0114\31\6\1\0\1\50\2\6" +
      "\14\0\17\6\1\u0115\22\6\1\0\1\50\2\6\14\0" +
      "\7\6\1\204\32\6\1\0\1\50\2\6\14\0\2\6" +
      "\1\u0116\37\6\1\0\1\50\2\6\14\0\10\6\1\u0117" +
      "\31\6\1\0\1\50\2\6\14\0\2\6\1\u0118\37\6" +
      "\1\0\1\50\2\6\14\0\13\6\1\u0119\26\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\u011a\35\6\1\0\1\50" +
      "\2\6\14\0\2\6\1\u011b\5\6\1\u011c\31\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\u011d\1\6\1\u011e\33\6" +
      "\1\0\1\50\2\6\14\0\2\6\1\u011f\37\6\1\0" +
      "\1\50\2\6\14\0\20\6\1\172\21\6\1\0\1\50" +
      "\2\6\14\0\10\6\1\u0120\6\6\1\u0121\22\6\1\0" +
      "\1\50\2\6\14\0\4\6\1\u0122\35\6\1\0\1\50" +
      "\2\6\14\0\2\6\1\u0123\37\6\1\0\1\50\2\6" +
      "\14\0\6\6\1\u0124\33\6\1\0\1\50\2\6\14\0" +
      "\5\6\1\u0125\34\6\1\0\1\50\2\6\14\0\3\6" +
      "\1\77\36\6\1\0\1\50\2\6\14\0\14\6\1\303" +
      "\25\6\1\0\1\50\2\6\14\0\7\6\1\272\5\6" +
      "\1\u0126\24\6\1\0\1\50\2\6\14\0\4\6\1\u0127" +
      "\35\6\1\0\1\50\2\6\14\0\4\6\1\77\35\6" +
      "\1\0\1\50\2\6\14\0\16\6\1\107\23\6\1\0" +
      "\1\50\2\6\14\0\5\6\1\u0128\34\6\1\0\1\50" +
      "\2\6\14\0\6\6\1\u0129\33\6\1\0\1\50\2\6" +
      "\14\0\10\6\1\u012a\31\6\1\0\1\50\2\6\14\0" +
      "\4\6\1\u012b\35\6\1\0\1\50\2\6\14\0\6\6" +
      "\1\267\33\6\1\0\1\50\2\6\14\0\13\6\1\u012c" +
      "\26\6\1\0\1\50\2\6\14\0\20\6\1\u012d\21\6" +
      "\1\0\1\50\2\6\14\0\5\6\1\200\34\6\1\0" +
      "\1\50\2\6\14\0\3\6\1\u012e\36\6\1\0\1\50" +
      "\2\6\14\0\12\6\1\u012f\27\6\1\0\1\50\2\6" +
      "\14\0\23\6\1\117\16\6\1\0\1\50\2\6\14\0" +
      "\2\6\1\u0130\37\6\1\0\1\50\2\6\14\0\17\6" +
      "\1\u0131\22\6\1\0\1\50\2\6\14\0\7\6\1\272" +
      "\32\6\1\0\1\50\2\6\14\0\7\6\1\u0112\1\6" +
      "\1\u0132\30\6\1\0\1\50\2\6\14\0\14\6\1\u0133" +
      "\25\6\1\0\1\50\2\6\14\0\21\6\1\u0134\20\6" +
      "\1\0\1\50\2\6\14\0\12\6\1\u0135\27\6\1\0" +
      "\1\50\2\6\14\0\1\6\1\u0136\40\6\1\0\1\50" +
      "\2\6\14\0\22\6\1\u0137\17\6\1\0\1\50\2\6" +
      "\14\0\17\6\1\250\22\6\1\0\1\50\2\6\14\0" +
      "\6\6\1\250\33\6\1\0\1\50\2\6\14\0\17\6" +
      "\1\u0138\22\6\1\0\1\50\2\6\14\0\3\6\1\u0139" +
      "\36\6\1\0\1\50\2\6\14\0\17\6\1\u013a\22\6" +
      "\1\0\1\50\2\6\14\0\16\6\1\u013b\23\6\1\0" +
      "\1\50\2\6\14\0\2\6\1\u013c\37\6\1\0\1\50" +
      "\2\6\14\0\3\6\1\u013d\36\6\1\0\1\50\2\6" +
      "\14\0\13\6\1\u013e\26\6\1\0\1\50\2\6\14\0" +
      "\14\6\1\u013f\25\6\1\0\1\50\2\6\14\0\4\6" +
      "\1\u0140\35\6\1\0\1\50\2\6\14\0\4\6\1\u0141" +
      "\35\6\1\0\1\50\2\6\14\0\12\6\1\u0142\27\6" +
      "\1\0\1\50\2\6\14\0\4\6\1\u0143\35\6\1\0" +
      "\1\50\2\6\14\0\35\6\1\u0144\4\6\1\0\1\50" +
      "\2\6\14\0\16\6\1\u0145\23\6\1\0\1\50\2\6" +
      "\14\0\11\6\1\u0146\30\6\1\0\1\50\2\6\14\0" +
      "\2\6\1\155\37\6\1\0\1\50\2\6\14\0\5\6" +
      "\1\u0147\34\6\1\0\1\50\2\6\14\0\16\6\1\u0148" +
      "\23\6\1\0\1\50\2\6\14\0\1\6\1\117\40\6" +
      "\1\0\1\50\2\6\14\0\13\6\1\u0149\26\6\1\0" +
      "\1\50\2\6\14\0\3\6\1\u014a\36\6\1\0\1\50" +
      "\2\6\14\0\10\6\1\u014b\31\6\1\0\1\50\2\6" +
      "\14\0\11\6\1\u014c\30\6\1\0\1\50\2\6\14\0" +
      "\11\6\1\u014d\30\6\1\0\1\50\2\6\14\0\26\6" +
      "\1\315\13\6\1\0\1\50\2\6\14\0\10\6\1\u014e" +
      "\31\6\1\0\1\50\2\6\14\0\5\6\1\u014f\34\6" +
      "\1\0\1\50\2\6\14\0\6\6\1\u0150\33\6\1\0" +
      "\1\50\2\6\14\0\16\6\1\u0151\23\6\1\0\1\50" +
      "\2\6\14\0\7\6\1\u0152\32\6\1\0\1\50\2\6" +
      "\14\0\17\6\1\204\22\6\1\0\1\50\2\6\14\0" +
      "\13\6\1\u0153\26\6\1\0\1\50\2\6\14\0\36\6" +
      "\1\u0154\3\6\1\0\1\50\2\6\14\0\34\6\1\u0155" +
      "\5\6\1\0\1\50\2\6\14\0\10\6\1\u0156\31\6" +
      "\1\0\1\50\2\6\14\0\3\6\1\u0157\36\6\1\0" +
      "\1\50\2\6\14\0\17\6\1\u0158\22\6\1\0\1\50" +
      "\2\6\14\0\34\6\1\u0159\5\6\1\0\1\50\2\6" +
      "\14\0\5\6\1\176\34\6\1\0\1\50\2\6\14\0" +
      "\7\6\1\u015a\32\6\1\0\1\50\2\6\14\0\6\6" +
      "\1\u015b\33\6\1\0\1\50\2\6\14\0\17\6\1\215" +
      "\22\6\1\0\1\50\2\6\14\0\34\6\1\u015c\5\6" +
      "\1\0\1\50\2\6\14\0\10\6\1\u015d\31\6\1\0" +
      "\1\50\2\6\14\0\3\6\1\u015e\36\6\1\0\1\50" +
      "\2\6\14\0\17\6\1\u015f\22\6\1\0\1\50\2\6" +
      "\14\0\5\6\1\u0160\34\6\1\0\1\50\2\6\14\0" +
      "\5\6\1\u0161\34\6\1\0\1\50\2\6\14\0\32\6" +
      "\1\u0162\7\6\1\0\1\50\2\6\14\0\22\6\1\u0104" +
      "\17\6\1\0\1\50\2\6\14\0\13\6\1\u0163\26\6" +
      "\1\0\1\50\2\6\14\0\17\6\1\u0164\22\6\1\0" +
      "\1\50\2\6\14\0\3\6\1\207\36\6\1\0\1\50" +
      "\2\6\14\0\10\6\1\u0165\31\6\1\0\1\50\2\6" +
      "\14\0\25\6\1\u0166\14\6\1\0\1\50\2\6\14\0" +
      "\4\6\1\u0167\35\6\1\0\1\50\2\6\14\0\14\6" +
      "\1\u0168\25\6\1\0\1\50\2\6\14\0\7\6\1\u0164" +
      "\32\6\1\0\1\50\2\6\14\0\13\6\1\u0169\26\6" +
      "\1\0\1\50\2\6\14\0\3\6\1\u016a\36\6\1\0" +
      "\1\50\2\6\14\0\10\6\1\u016b\31\6\1\0\1\50" +
      "\2\6\14\0\17\6\1\u016c\22\6\1\0\1\50\2\6" +
      "\14\0\31\6\1\117\10\6\1\0\1\50\2\6\14\0" +
      "\4\6\1\u011d\35\6\1\0\1\50\2\6\14\0\14\6" +
      "\1\204\25\6\1\0\1\50\2\6\14\0\7\6\1\u016d" +
      "\32\6\1\0\1\50\2\6\14\0\10\6\1\u016e\31\6" +
      "\1\0\1\50\2\6\14\0\2\6\1\u016f\37\6\1\0" +
      "\1\50\2\6\14\0\10\6\1\u0170\31\6\1\0\1\50" +
      "\2\6\14\0\17\6\1\u0171\22\6\1\0\1\50\2\6" +
      "\14\0\1\6\1\u0172\40\6\1\0\1\50\2\6\14\0" +
      "\12\6\1\143\27\6\1\0\1\50\2\6\14\0\34\6" +
      "\1\u0173\5\6\1\0\1\50\2\6\14\0\1\6\1\u0174" +
      "\40\6\1\0\1\50\2\6\14\0\12\6\1\u0175\27\6" +
      "\1\0\1\50\2\6\14\0\15\6\1\207\24\6\1\0" +
      "\1\50\2\6\14\0\5\6\1\152\34\6\1\0\1\50" +
      "\2\6\14\0\10\6\1\176\31\6\1\0\1\50\2\6" +
      "\14\0\12\6\1\u0176\27\6\1\0\1\50\2\6\14\0" +
      "\22\6\1\117\17\6\1\0\1\50\2\6\14\0\16\6" +
      "\1\u0177\23\6\1\0\1\50\2\6\14\0\2\6\1\u011b" +
      "\37\6\1\0\1\50\2\6\14\0\2\6\1\u0178\37\6" +
      "\1\0\1\50\2\6\14\0\7\6\1\346\32\6\1\0" +
      "\1\50\2\6\14\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[17950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
      "Unkown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\10\3\0\25\1\4\11\2\1\1\11\2\1" +
      "\2\11\1\0\1\1\1\0\67\1\1\0\4\1\3\11" +
      "\74\1\1\0\324\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[376];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Segment s;
  private int offsetShift;
  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  public AqlTokenMaker() {
  }

  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;

    // Start off in the proper state.
    int state = Token.NULL;
    switch (initialTokenType) {
      case Token.COMMENT_MULTILINE:
        state = COMMENT;
        break;
      default:
        state = Token.NULL;
    }

    s = text;
    try {
      yyreset(zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return new TokenImpl();
    }
  }

  private void addToken(int tokenType) {
    addToken(zzStartRead, zzMarkedPos - 1, tokenType);
  }

  private void addToken(int start, int end, int tokenType) {
    int so = start + offsetShift;
    addToken(zzBuffer, start, end, tokenType, so);
  }

  public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
    super.addToken(array, start, end, tokenType, startOffset);
    zzStartRead = zzMarkedPos;
  }

  /**
   * Refills the input buffer.
   * 
   * @return <code>true</code> if EOF was reached, otherwise
   *         <code>false</code>.
   */
  private boolean zzRefill() {
    return zzCurrentPos >= s.offset + s.count;
  }

  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   * 
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   * 
   * @param reader the new input stream
   */
  public final void yyreset(Reader reader) {
    // 's' has been updated.
    zzBuffer = s.array;
    /*
     * We replaced the line below with the two below it because zzRefill
     * no longer "refills" the buffer (since the way we do it, it's always
     * "full" the first time through, since it points to the segment's
     * array). So, we assign zzEndRead here.
     */
    // zzStartRead = zzEndRead = s.offset;
    zzStartRead = s.offset;
    zzEndRead = zzStartRead + s.count - 1;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
    zzLexicalState = YYINITIAL;
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
  }

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param in the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0; /* index in packed string */
    int j = 0; /* index in unpacked array */
    while (i < 1948) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do
        map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: {
          addToken(Token.IDENTIFIER);
        }
        case 17:
          break;
        case 2: {
          addToken(Token.LITERAL_NUMBER_FLOAT);
        }
        case 18:
          break;
        case 3: {
          addToken(Token.ERROR_CHAR);
        }
        case 19:
          break;
        case 4: {
          addToken(Token.SEPARATOR);
        }
        case 20:
          break;
        case 5: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          yybegin(DOUBLE_QUOTED_STRING);
        }
        case 21:
          break;
        case 6: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          yybegin(SINGLE_QUOTED_STRING);
        }
        case 22:
          break;
        case 7: {
          addToken(Token.WHITESPACE);
        }
        case 23:
          break;
        case 8: {
        }
        case 24:
          break;
        case 9: {
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
        }
        case 25:
          break;
        case 10: {
          yybegin(YYINITIAL);
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
        }
        case 26:
          break;
        case 11: {
          addToken(Token.ERROR_STRING_DOUBLE);
          yybegin(YYINITIAL);
        }
        case 27:
          break;
        case 12: {
          addToken(Token.RESERVED_WORD);
        }
        case 28:
          break;
        case 13: {
          addToken(Token.FUNCTION);
        }
        case 29:
          break;
        case 14: {
          addToken(Token.COMMENT_EOL);
        }
        case 30:
          break;
        case 15: {
          yybegin(COMMENT);
        }
        case 31:
          break;
        case 16: {
          yybegin(YYINITIAL);
          addToken(zzStartRead, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
        }
        case 32:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
              case DOUBLE_QUOTED_STRING: {
                addToken(Token.ERROR_STRING_DOUBLE);
                yybegin(YYINITIAL);
              }
              case 377:
                break;
              case SINGLE_QUOTED_STRING: {
                addToken(Token.ERROR_STRING_DOUBLE);
                yybegin(YYINITIAL);
              }
              case 378:
                break;
              default: {
                addNullToken();
                return firstToken;
              }
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

}
